/* eslint-disable */
// tslint:disable
/**
 * gameguild.gg
 * 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

export namespace Api {
	export interface ApiErrorResponseDto {
		/**
		 * @type {number}
		 * @memberof ApiErrorResponseDto
		 */
		statusCode: number;
		timestamp: string;
		path: string;
		msg: string;
		name: string;
		message: Api.ErrorMessage[];
		error: Api.ApiErrorResponseDto.Error;
		stack: Api.ApiErrorResponseDto.Stack;
		raw: Api.ApiErrorResponseDto.Raw;
	}
	
	/**
	 * @export
	 * @namespace ApiErrorResponseDto
	 */
	export namespace ApiErrorResponseDto {
		export interface Error {
		}
	
		export interface Stack {
		}
	
		export interface Raw {
		}
	
	}

	export interface ChapterEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.ChapterEntity.Visibility;
		thumbnail: string;
		/**
		 * @type {number}
		 * @memberof ChapterEntity
		 */
		order: number;
		course: Api.CourseEntity;
		lectures: Api.LectureEntity[];
	}
	
	/**
	 * @export
	 * @namespace ChapterEntity
	 */
	export namespace ChapterEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface ChessLeaderboardResponseEntryDto {
		username: string;
		/**
		 * @type {number}
		 * @memberof ChessLeaderboardResponseEntryDto
		 */
		elo: number;
	}

	export interface ChessMatchRequestDto {
		player1username: string;
		player2username: string;
	}

	export interface ChessMatchResultDto {
		id: string;
		players: string[];
		moves: string[];
		winner: string;
		draw: boolean;
		result: Api.ChessMatchResultDto.Result;
		reason: Api.ChessMatchResultDto.Reason;
		cpuTime: number[];
		finalFen: string;
		eloChange: number[];
		elo: number[];
		createdAt: string;
	}
	
	/**
	 * @export
	 * @namespace ChessMatchResultDto
	 */
	export namespace ChessMatchResultDto {
		export type Result =
			'GAME_OVER' |
			'DRAW' |
			'NONE'
		
		export namespace Result {
			export enum Enum {
				GAMEOVER = 'GAME_OVER',
				DRAW = 'DRAW',
				NONE = 'NONE'
			}
		}
	
		export type Reason =
			'CHECKMATE' |
			'STALEMATE' |
			'INSUFFICIENT_MATERIAL' |
			'FIFTY_MOVE_RULE' |
			'THREEFOLD_REPETITION' |
			'INVALID_MOVE' |
			'NONE'
		
		export namespace Reason {
			export enum Enum {
				CHECKMATE = 'CHECKMATE',
				STALEMATE = 'STALEMATE',
				INSUFFICIENTMATERIAL = 'INSUFFICIENT_MATERIAL',
				FIFTYMOVERULE = 'FIFTY_MOVE_RULE',
				THREEFOLDREPETITION = 'THREEFOLD_REPETITION',
				INVALIDMOVE = 'INVALID_MOVE',
				NONE = 'NONE'
			}
		}
	
	}

	export interface ChessMoveRequestDto {
		username: string;
		fen: string;
	}

	export interface CompetitionRunEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
	}

	export interface CompetitionRunSubmissionReportEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		winsAsP1: number;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		winsAsP2: number;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		totalWins: number;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		pointsAsP1: number;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		pointsAsP2: number;
		/**
		 * @type {number}
		 * @memberof CompetitionRunSubmissionReportEntity
		 */
		totalPoints: number;
		run: Api.CompetitionRunEntity;
		submission: Api.CompetitionSubmissionEntity;
		user: Api.UserEntity;
	}

	export interface CompetitionSubmissionDto {
		file: string | Blob;
	}
	
	/**
	 * @export
	 * @namespace CompetitionSubmissionDto
	 */
	export namespace CompetitionSubmissionDto {
		export interface MultipartFormData {
			file: Api.CompetitionSubmissionDto.MultipartFormData.FilePart;
		}
		
		/**
		 * @export
		 * @namespace MultipartFormData
		 */
		export namespace MultipartFormData {
			export interface FilePart {
				value: string | Blob;
			}
		
		}
	
	}

	export interface CompetitionSubmissionEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
	}

	export interface CourseEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.CourseEntity.Visibility;
		thumbnail: string;
		/**
		 * @type {number}
		 * @memberof CourseEntity
		 */
		price: number;
		subscriptionAccess: boolean;
		author: Api.UserEntity;
		lectures: Api.LectureEntity[];
		chapters: Api.ChapterEntity[];
	}
	
	/**
	 * @export
	 * @namespace CourseEntity
	 */
	export namespace CourseEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface CreateProjectDto {
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.CreateProjectDto.Visibility;
		thumbnail: string;
	}
	
	/**
	 * @export
	 * @namespace CreateProjectDto
	 */
	export namespace CreateProjectDto {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface CreateTicketDto {
	}

	export interface EditorRequestDto {
		id: string;
		editor: Api.IdDto;
	}

	export interface EmailDto {
		email: string;
	}

	export interface ErrorMessage {
		target: Api.ErrorMessage.Target;
		property: string;
		constraints: ({ [name: string]: string })[];
	}
	
	/**
	 * @export
	 * @namespace ErrorMessage
	 */
	export namespace ErrorMessage {
		export interface Target {
		}
	
	}

	export interface EthereumSigninChallengeRequestDto {
		address: string;
	}

	export interface EthereumSigninChallengeResponseDto {
		message: string;
	}

	export interface EthereumSigninValidateRequestDto {
		address: string;
		signature: string;
	}

	export interface GetManyJobApplicationEntityResponseDto {
		data: Api.JobApplicationEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyJobApplicationEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobApplicationEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobApplicationEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobApplicationEntityResponseDto
		 */
		pageCount: number;
	}

	export interface GetManyJobPostEntityResponseDto {
		data: Api.JobPostEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyJobPostEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobPostEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobPostEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobPostEntityResponseDto
		 */
		pageCount: number;
	}

	export interface GetManyJobTagEntityResponseDto {
		data: Api.JobTagEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyJobTagEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobTagEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobTagEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyJobTagEntityResponseDto
		 */
		pageCount: number;
	}

	export interface GetManyProjectEntityResponseDto {
		data: Api.ProjectEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyProjectEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectEntityResponseDto
		 */
		pageCount: number;
	}

	export interface GetManyProjectVersionEntityResponseDto {
		data: Api.ProjectVersionEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyProjectVersionEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectVersionEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectVersionEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyProjectVersionEntityResponseDto
		 */
		pageCount: number;
	}

	export interface GetManyTicketEntityResponseDto {
		data: Api.TicketEntity[];
		/**
		 * @type {number}
		 * @memberof GetManyTicketEntityResponseDto
		 */
		count: number;
		/**
		 * @type {number}
		 * @memberof GetManyTicketEntityResponseDto
		 */
		total: number;
		/**
		 * @type {number}
		 * @memberof GetManyTicketEntityResponseDto
		 */
		page: number;
		/**
		 * @type {number}
		 * @memberof GetManyTicketEntityResponseDto
		 */
		pageCount: number;
	}

	export interface IdDto {
		id: string;
	}

	export interface JobAplicationCreateDto {
		job: Api.JobPostEntity;
	}

	export interface JobApplicationEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		applicant: Api.UserEntity;
		job: Api.JobPostEntity;
		/**
		 * @type {number}
		 * @memberof JobApplicationEntity
		 */
		progress: number;
		rejected: boolean;
		withdrawn: boolean;
	}

	export interface JobPostCreateDto {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.JobPostCreateDto.Visibility;
		thumbnail: string;
		location: string;
		'job_type': Api.JobPostCreateDto.JobType;
		'job_tags': Api.JobTagEntity[];
		'job_tag_ids': string[];
	}
	
	/**
	 * @export
	 * @namespace JobPostCreateDto
	 */
	export namespace JobPostCreateDto {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
		export type JobType =
			'CONTINUOUS' |
			'TASK'
		
		export namespace JobType {
			export enum Enum {
				CONTINUOUS = 'CONTINUOUS',
				TASK = 'TASK'
			}
		}
	
	}

	export interface JobPostEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.JobPostEntity.Visibility;
		thumbnail: string;
		location: string;
		'job_type': Api.JobPostEntity.JobType;
		'job_tags': Api.JobTagEntity[];
	}
	
	/**
	 * @export
	 * @namespace JobPostEntity
	 */
	export namespace JobPostEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
		export type JobType =
			'CONTINUOUS' |
			'TASK'
		
		export namespace JobType {
			export enum Enum {
				CONTINUOUS = 'CONTINUOUS',
				TASK = 'TASK'
			}
		}
	
	}

	export interface JobPostWithAppliedDto {
		location: string;
		'job_type': Api.JobPostWithAppliedDto.JobType;
		'job_tags': Api.JobTagEntity[];
		applied: boolean;
	}
	
	/**
	 * @export
	 * @namespace JobPostWithAppliedDto
	 */
	export namespace JobPostWithAppliedDto {
		export type JobType =
			'CONTINUOUS' |
			'TASK'
		
		export namespace JobType {
			export enum Enum {
				CONTINUOUS = 'CONTINUOUS',
				TASK = 'TASK'
			}
		}
	
	}

	export interface JobTagEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		name: string;
	}

	export interface LectureEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.LectureEntity.Visibility;
		thumbnail: string;
		/**
		 * @type {number}
		 * @memberof LectureEntity
		 */
		order: number;
		course: Api.CourseEntity;
		chapter: Api.CourseEntity;
	}
	
	/**
	 * @export
	 * @namespace LectureEntity
	 */
	export namespace LectureEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface LocalSignInResponseDto {
		accessToken: string;
		refreshToken: string;
		user: Api.UserEntity;
	}

	export interface LocalSignUpDto {
		username: string;
		email: string;
		password: string;
	}

	export interface MatchSearchRequestDto {
		username: string;
		/**
		 * @type {number}
		 * @memberof MatchSearchRequestDto
		 */
		pageSize: number;
		/**
		 * @type {number}
		 * @memberof MatchSearchRequestDto
		 */
		pageId: number;
	}

	export interface MatchSearchResponseDto {
		id: string;
		createdAt: string;
		updatedAt: string;
		winner: string;
		lastState: string;
		players: string[];
	}

	export interface OkDto {
		success: boolean;
		message: string;
	}

	export interface PostEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.PostEntity.Visibility;
		thumbnail: string;
	}
	
	/**
	 * @export
	 * @namespace PostEntity
	 */
	export namespace PostEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface ProjectEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		slug: string;
		title: string;
		summary: string;
		body: string;
		visibility: Api.ProjectEntity.Visibility;
		thumbnail: string;
		versions: Api.ProjectVersionEntity[];
		tickets: Api.TicketEntity[];
	}
	
	/**
	 * @export
	 * @namespace ProjectEntity
	 */
	export namespace ProjectEntity {
		export type Visibility =
			'DRAFT' |
			'PUBLISHED' |
			'FUTURE' |
			'PENDING' |
			'PRIVATE' |
			'TRASH'
		
		export namespace Visibility {
			export enum Enum {
				DRAFT = 'DRAFT',
				PUBLISHED = 'PUBLISHED',
				FUTURE = 'FUTURE',
				PENDING = 'PENDING',
				PRIVATE = 'PRIVATE',
				TRASH = 'TRASH'
			}
		}
	
	}

	export interface ProjectFeedbackResponseEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		version: Api.ProjectVersionEntity;
		user: Api.UserEntity;
		responses: string[];
	}

	export interface ProjectTestFeedbackQuestion {
		'type': Api.ProjectTestFeedbackQuestion.Type;
		description: string;
		isRequired: boolean;
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestion
	 */
	export namespace ProjectTestFeedbackQuestion {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectTestFeedbackQuestionCheckbox {
		'type': Api.ProjectTestFeedbackQuestionCheckbox.Type;
		description: string;
		isRequired: boolean;
		options: string[];
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestionCheckbox
	 */
	export namespace ProjectTestFeedbackQuestionCheckbox {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectTestFeedbackQuestionDropdown {
		'type': Api.ProjectTestFeedbackQuestionDropdown.Type;
		description: string;
		isRequired: boolean;
		options: string[];
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestionDropdown
	 */
	export namespace ProjectTestFeedbackQuestionDropdown {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectTestFeedbackQuestionLinearScale {
		'type': Api.ProjectTestFeedbackQuestionLinearScale.Type;
		description: string;
		isRequired: boolean;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionLinearScale
		 */
		minimum: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionLinearScale
		 */
		maximum: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionLinearScale
		 */
		steps: number;
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestionLinearScale
	 */
	export namespace ProjectTestFeedbackQuestionLinearScale {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectTestFeedbackQuestionParagraph {
		'type': Api.ProjectTestFeedbackQuestionParagraph.Type;
		description: string;
		isRequired: boolean;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionParagraph
		 */
		minimumCharacters: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionParagraph
		 */
		maximumCharacters: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionParagraph
		 */
		minimumLines: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionParagraph
		 */
		maximumLines: number;
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestionParagraph
	 */
	export namespace ProjectTestFeedbackQuestionParagraph {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectTestFeedbackQuestionShortAnswer {
		'type': Api.ProjectTestFeedbackQuestionShortAnswer.Type;
		description: string;
		isRequired: boolean;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionShortAnswer
		 */
		minimumCharacters: number;
		/**
		 * @type {number}
		 * @memberof ProjectTestFeedbackQuestionShortAnswer
		 */
		maximumCharacters: number;
	}
	
	/**
	 * @export
	 * @namespace ProjectTestFeedbackQuestionShortAnswer
	 */
	export namespace ProjectTestFeedbackQuestionShortAnswer {
		export type Type =
			'SHORT_ANSWER' |
			'PARAGRAPH' |
			'CHECKBOX' |
			'DROPDOWN' |
			'LINEAR_SCALE'
		
		export namespace Type {
			export enum Enum {
				SHORTANSWER = 'SHORT_ANSWER',
				PARAGRAPH = 'PARAGRAPH',
				CHECKBOX = 'CHECKBOX',
				DROPDOWN = 'DROPDOWN',
				LINEARSCALE = 'LINEAR_SCALE'
			}
		}
	
	}

	export interface ProjectVersionEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		version: string;
		'archive_url': string;
		'notes_url': string;
		'feedback_form': (Api.ProjectTestFeedbackQuestion | Api.ProjectTestFeedbackQuestionCheckbox | Api.ProjectTestFeedbackQuestionDropdown | Api.ProjectTestFeedbackQuestionLinearScale | Api.ProjectTestFeedbackQuestionShortAnswer | Api.ProjectTestFeedbackQuestionParagraph)[];
		'feedback_deadline': string;
		project: Api.ProjectEntity;
		responses: Api.ProjectFeedbackResponseEntity[];
	}

	export interface TerminalDto {
	}

	export interface TicketEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		owner: Api.UserEntity;
		editors: Api.UserEntity[];
		/**
		 * @description <p>Title of the ticket</p>
		 * @type {string}
		 * @memberof TicketEntity
		 */
		title: string;
		/**
		 * @description <p>Description of the ticket</p>
		 * @type {string}
		 * @memberof TicketEntity
		 */
		description: string;
		/**
		 * @description <p>Description of the ticket</p>
		 * @type {string}
		 * @memberof TicketEntity
		 */
		projectId: string;
		/**
		 * @description <p>Status of the ticket</p>
		 * @type {Api.TicketEntity.Status}
		 * @memberof TicketEntity
		 */
		status: Api.TicketEntity.Status;
		/**
		 * @description <p>Priority of the ticket</p>
		 * @type {Api.TicketEntity.Priority}
		 * @memberof TicketEntity
		 */
		priority: Api.TicketEntity.Priority;
	}
	
	/**
	 * @export
	 * @namespace TicketEntity
	 */
	export namespace TicketEntity {
		/**
		 * <p>Status of the ticket</p>
		 */
		export type Status =
			'OPEN' |
			'IN_PROGRESS' |
			'RESOLVED' |
			'CLOSED'
		
		export namespace Status {
			export enum Enum {
				OPEN = 'OPEN',
				INPROGRESS = 'IN_PROGRESS',
				RESOLVED = 'RESOLVED',
				CLOSED = 'CLOSED'
			}
		}
	
		/**
		 * <p>Priority of the ticket</p>
		 */
		export type Priority =
			'LOW' |
			'MEDIUM' |
			'HIGH' |
			'CRITICAL'
		
		export namespace Priority {
			export enum Enum {
				LOW = 'LOW',
				MEDIUM = 'MEDIUM',
				HIGH = 'HIGH',
				CRITICAL = 'CRITICAL'
			}
		}
	
	}

	export interface TransferOwnershipRequestDto {
		id: string;
		newUser: Api.IdDto;
	}

	export interface UserEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		username: string;
		email: string;
		emailVerified: boolean;
		passwordHash: string;
		passwordSalt: string;
		facebookId: string;
		googleId: string;
		githubId: string;
		appleId: string;
		linkedinId: string;
		twitterId: string;
		walletAddress: string;
		profile: Api.UserProfileEntity;
		competitionSubmissions: Api.CompetitionSubmissionEntity[];
		/**
		 * @type {number}
		 * @memberof UserEntity
		 */
		elo: number;
		posts: Api.PostEntity[];
		courses: Api.CourseEntity[];
	}

	export interface UserProfileEntity {
		id: string;
		createdAt: string;
		updatedAt: string;
		user: Api.UserEntity;
		bio: string;
		name: string;
		givenName: string;
		familyName: string;
		picture: string;
	}

	export interface UserProfilePatchDto {
		picture: string;
		name: string;
		bio: string;
	}

}

