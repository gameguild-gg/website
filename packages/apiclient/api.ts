/* eslint-disable */
// tslint:disable
/**
 * gameguild.gg
 * 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import { BASE_PATH, COLLECTION_FORMATS, FetchAPI, FetchArgs, BaseAPI, RequiredError, defaultFetch } from "./runtime";
import { Api } from "./models";

export type FactoryFunction<T> = (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) => T;

export namespace AuthApi {
	export type AuthControllerGetCurrentUserResponse =
		| AuthControllerGetCurrentUser400Response
		| AuthControllerGetCurrentUser401Response
		| AuthControllerGetCurrentUser403Response
		| AuthControllerGetCurrentUser404Response
		| AuthControllerGetCurrentUser409Response
		| AuthControllerGetCurrentUser422Response
		| AuthControllerGetCurrentUser500Response
		| AuthControllerGetCurrentUserDefaultResponse
	
	export interface AuthControllerGetCurrentUser400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUser500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetCurrentUserDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.UserEntity
		headers?: undefined
	}
	
	export type AuthControllerGetWeb3SignInChallengeResponse =
		| AuthControllerGetWeb3SignInChallenge400Response
		| AuthControllerGetWeb3SignInChallenge422Response
		| AuthControllerGetWeb3SignInChallenge500Response
		| AuthControllerGetWeb3SignInChallengeDefaultResponse
	
	export interface AuthControllerGetWeb3SignInChallenge400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetWeb3SignInChallenge422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetWeb3SignInChallenge500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerGetWeb3SignInChallengeDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.EthereumSigninChallengeResponseDto
		headers?: undefined
	}
	
	export type AuthControllerMagicLinkResponse =
		| AuthControllerMagicLink400Response
		| AuthControllerMagicLink422Response
		| AuthControllerMagicLink500Response
		| AuthControllerMagicLinkDefaultResponse
	
	export interface AuthControllerMagicLink400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerMagicLink422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerMagicLink500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerMagicLinkDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.OkDto
		headers?: undefined
	}
	
	export type AuthControllerRefreshTokenResponse =
		| AuthControllerRefreshToken400Response
		| AuthControllerRefreshToken401Response
		| AuthControllerRefreshToken403Response
		| AuthControllerRefreshToken404Response
		| AuthControllerRefreshToken409Response
		| AuthControllerRefreshToken422Response
		| AuthControllerRefreshToken500Response
		| AuthControllerRefreshTokenDefaultResponse
	
	export interface AuthControllerRefreshToken400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshToken500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerRefreshTokenDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.LocalSignInResponseDto
		headers?: undefined
	}
	
	export type AuthControllerSignInWithGoogleResponse =
		| AuthControllerSignInWithGoogle400Response
		| AuthControllerSignInWithGoogle422Response
		| AuthControllerSignInWithGoogle500Response
		| AuthControllerSignInWithGoogleDefaultResponse
	
	export interface AuthControllerSignInWithGoogle400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignInWithGoogle422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignInWithGoogle500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignInWithGoogleDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.LocalSignInResponseDto
		headers?: undefined
	}
	
	export type AuthControllerSignUpWithEmailUsernamePasswordResponse =
		| AuthControllerSignUpWithEmailUsernamePassword400Response
		| AuthControllerSignUpWithEmailUsernamePassword422Response
		| AuthControllerSignUpWithEmailUsernamePassword500Response
		| AuthControllerSignUpWithEmailUsernamePasswordDefaultResponse
	
	export interface AuthControllerSignUpWithEmailUsernamePassword400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignUpWithEmailUsernamePassword422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignUpWithEmailUsernamePassword500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerSignUpWithEmailUsernamePasswordDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.LocalSignInResponseDto
		headers?: undefined
	}
	
	export type AuthControllerUserExistsResponse =
		| AuthControllerUserExists400Response
		| AuthControllerUserExists422Response
		| AuthControllerUserExists500Response
		| AuthControllerUserExistsDefaultResponse
	
	export interface AuthControllerUserExists400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerUserExists422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerUserExists500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerUserExistsDefaultResponse {
		status: number
		contentType: 'application/json'
		body: boolean
		headers?: undefined
	}
	
	export type AuthControllerValidateWeb3SignInChallengeResponse =
		| AuthControllerValidateWeb3SignInChallenge400Response
		| AuthControllerValidateWeb3SignInChallenge422Response
		| AuthControllerValidateWeb3SignInChallenge500Response
		| AuthControllerValidateWeb3SignInChallengeDefaultResponse
	
	export interface AuthControllerValidateWeb3SignInChallenge400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerValidateWeb3SignInChallenge422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerValidateWeb3SignInChallenge500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface AuthControllerValidateWeb3SignInChallengeDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.LocalSignInResponseDto
		headers?: undefined
	}
	
}

/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerGetCurrentUser(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/auth/me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EthereumSigninChallengeRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerGetWeb3SignInChallenge(request: Api.EthereumSigninChallengeRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling authControllerGetWeb3SignInChallenge.');
			}

			let localVarPath = `/auth/web3/sign-in/challenge`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EmailDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerMagicLink(request: Api.EmailDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling authControllerMagicLink.');
			}

			let localVarPath = `/auth/magic-link`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerRefreshToken(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/auth/refresh-token`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} token
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerSignInWithGoogle(token: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'token' is not null or undefined
			if (token === null || token === undefined) {
				throw new RequiredError('token', 'Required parameter token was null or undefined when calling authControllerSignInWithGoogle.');
			}

			let localVarPath = `/auth/google/callback/{token}`
				.replace('{token}', encodeURIComponent(String(token)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.LocalSignUpDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerSignUpWithEmailUsernamePassword(request: Api.LocalSignUpDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling authControllerSignUpWithEmailUsernamePassword.');
			}

			let localVarPath = `/auth/local/sign-up`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} user
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerUserExists(user: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'user' is not null or undefined
			if (user === null || user === undefined) {
				throw new RequiredError('user', 'Required parameter user was null or undefined when calling authControllerUserExists.');
			}

			let localVarPath = `/auth/userExists/{user}`
				.replace('{user}', encodeURIComponent(String(user)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EthereumSigninValidateRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerValidateWeb3SignInChallenge(request: Api.EthereumSigninValidateRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling authControllerValidateWeb3SignInChallenge.');
			}

			let localVarPath = `/auth/web3/sign-in/validate`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerGetCurrentUser(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerGetCurrentUserResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerGetCurrentUser(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.UserEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EthereumSigninChallengeRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerGetWeb3SignInChallenge(request: Api.EthereumSigninChallengeRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerGetWeb3SignInChallengeResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerGetWeb3SignInChallenge(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.EthereumSigninChallengeResponseDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EmailDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerMagicLink(request: Api.EmailDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerMagicLinkResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerMagicLink(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.OkDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerRefreshToken(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerRefreshTokenResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerRefreshToken(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.LocalSignInResponseDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {string} token
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerSignInWithGoogle(token: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerSignInWithGoogleResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerSignInWithGoogle(token, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.LocalSignInResponseDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.LocalSignUpDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerSignUpWithEmailUsernamePassword(request: Api.LocalSignUpDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerSignUpWithEmailUsernamePasswordResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerSignUpWithEmailUsernamePassword(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.LocalSignInResponseDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {string} user
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerUserExists(user: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerUserExistsResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerUserExists(user, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as boolean,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EthereumSigninValidateRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authControllerValidateWeb3SignInChallenge(request: Api.EthereumSigninValidateRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApi.AuthControllerValidateWeb3SignInChallengeResponse> {
			const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerValidateWeb3SignInChallenge(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.LocalSignInResponseDto,
					}
				}
				throw response;
			};
		},
	}
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory: FactoryFunction<AuthApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new AuthApi(configuration, basePath, fetch);
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerGetCurrentUser(options?: RequestInit): Promise<AuthApi.AuthControllerGetCurrentUserResponse>

	/**
	 * @param {Api.EthereumSigninChallengeRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerGetWeb3SignInChallenge(request: Api.EthereumSigninChallengeRequestDto, options?: RequestInit): Promise<AuthApi.AuthControllerGetWeb3SignInChallengeResponse>

	/**
	 * @param {Api.EmailDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerMagicLink(request: Api.EmailDto, options?: RequestInit): Promise<AuthApi.AuthControllerMagicLinkResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerRefreshToken(options?: RequestInit): Promise<AuthApi.AuthControllerRefreshTokenResponse>

	/**
	 * @param {string} token
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerSignInWithGoogle(token: string, options?: RequestInit): Promise<AuthApi.AuthControllerSignInWithGoogleResponse>

	/**
	 * @param {Api.LocalSignUpDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerSignUpWithEmailUsernamePassword(request: Api.LocalSignUpDto, options?: RequestInit): Promise<AuthApi.AuthControllerSignUpWithEmailUsernamePasswordResponse>

	/**
	 * @param {string} user
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerUserExists(user: string, options?: RequestInit): Promise<AuthApi.AuthControllerUserExistsResponse>

	/**
	 * @param {Api.EthereumSigninValidateRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	authControllerValidateWeb3SignInChallenge(request: Api.EthereumSigninValidateRequestDto, options?: RequestInit): Promise<AuthApi.AuthControllerValidateWeb3SignInChallengeResponse>

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerGetCurrentUser(options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerGetCurrentUser(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EthereumSigninChallengeRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerGetWeb3SignInChallenge(request: Api.EthereumSigninChallengeRequestDto, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerGetWeb3SignInChallenge(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EmailDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerMagicLink(request: Api.EmailDto, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerMagicLink(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerRefreshToken(options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerRefreshToken(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} token
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerSignInWithGoogle(token: string, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerSignInWithGoogle(token, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.LocalSignUpDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerSignUpWithEmailUsernamePassword(request: Api.LocalSignUpDto, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerSignUpWithEmailUsernamePassword(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} user
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerUserExists(user: string, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerUserExists(user, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EthereumSigninValidateRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public authControllerValidateWeb3SignInChallenge(request: Api.EthereumSigninValidateRequestDto, options?: RequestInit) {
		return AuthApiFp(this.configuration).authControllerValidateWeb3SignInChallenge(request, options)(this.fetch, this.basePath);
	}

}
export namespace ChoiceCastsApi {
	export type ChoiceCastControllerGetChoiceCastCandidatesResponse =
		| ChoiceCastControllerGetChoiceCastCandidates201Response
	
	export interface ChoiceCastControllerGetChoiceCastCandidates201Response {
		status: 201
		body?: undefined
		headers?: undefined
	}
	
	export type ChoiceCastControllerGetChoiceCastFromUserResponse =
		| ChoiceCastControllerGetChoiceCastFromUser200Response
	
	export interface ChoiceCastControllerGetChoiceCastFromUser200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export type ChoiceCastControllerGetVotesForChoiceCastResponse =
		| ChoiceCastControllerGetVotesForChoiceCast200Response
	
	export interface ChoiceCastControllerGetVotesForChoiceCast200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export type ChoiceCastControllerResetVoteResponse =
		| ChoiceCastControllerResetVote200Response
	
	export interface ChoiceCastControllerResetVote200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export type ChoiceCastControllerSubmitChoiceCastResponse =
		| ChoiceCastControllerSubmitChoiceCast200Response
	
	export interface ChoiceCastControllerSubmitChoiceCast200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export type ChoiceCastControllerVoteForChoiceCastResponse =
		| ChoiceCastControllerVoteForChoiceCast200Response
	
	export interface ChoiceCastControllerVoteForChoiceCast200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export type CreateOneBaseChoiceCastControllerEventEntityResponse =
		| CreateOneBaseChoiceCastControllerEventEntity201Response
		| CreateOneBaseChoiceCastControllerEventEntity400Response
		| CreateOneBaseChoiceCastControllerEventEntity401Response
		| CreateOneBaseChoiceCastControllerEventEntity403Response
		| CreateOneBaseChoiceCastControllerEventEntity404Response
		| CreateOneBaseChoiceCastControllerEventEntity409Response
		| CreateOneBaseChoiceCastControllerEventEntity422Response
		| CreateOneBaseChoiceCastControllerEventEntity500Response
	
	export interface CreateOneBaseChoiceCastControllerEventEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.EventEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseChoiceCastControllerEventEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseChoiceCastControllerEventEntityResponse =
		| DeleteOneBaseChoiceCastControllerEventEntity200Response
		| DeleteOneBaseChoiceCastControllerEventEntity400Response
		| DeleteOneBaseChoiceCastControllerEventEntity401Response
		| DeleteOneBaseChoiceCastControllerEventEntity403Response
		| DeleteOneBaseChoiceCastControllerEventEntity404Response
		| DeleteOneBaseChoiceCastControllerEventEntity409Response
		| DeleteOneBaseChoiceCastControllerEventEntity422Response
		| DeleteOneBaseChoiceCastControllerEventEntity500Response
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseChoiceCastControllerEventEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseChoiceCastControllerEventEntityResponse =
		| GetManyBaseChoiceCastControllerEventEntity200Response
		| GetManyBaseChoiceCastControllerEventEntity400Response
		| GetManyBaseChoiceCastControllerEventEntity401Response
		| GetManyBaseChoiceCastControllerEventEntity403Response
		| GetManyBaseChoiceCastControllerEventEntity404Response
		| GetManyBaseChoiceCastControllerEventEntity409Response
		| GetManyBaseChoiceCastControllerEventEntity422Response
		| GetManyBaseChoiceCastControllerEventEntity500Response
	
	export interface GetManyBaseChoiceCastControllerEventEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyEventEntityResponseDto | Api.EventEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseChoiceCastControllerEventEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntityParameters {
		slug: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseChoiceCastControllerEventEntityResponse =
		| GetOneBaseChoiceCastControllerEventEntity200Response
		| GetOneBaseChoiceCastControllerEventEntity400Response
		| GetOneBaseChoiceCastControllerEventEntity401Response
		| GetOneBaseChoiceCastControllerEventEntity403Response
		| GetOneBaseChoiceCastControllerEventEntity404Response
		| GetOneBaseChoiceCastControllerEventEntity409Response
		| GetOneBaseChoiceCastControllerEventEntity422Response
		| GetOneBaseChoiceCastControllerEventEntity500Response
	
	export interface GetOneBaseChoiceCastControllerEventEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.EventEntity
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseChoiceCastControllerEventEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseChoiceCastControllerEventEntityResponse =
		| UpdateOneBaseChoiceCastControllerEventEntity200Response
		| UpdateOneBaseChoiceCastControllerEventEntity400Response
		| UpdateOneBaseChoiceCastControllerEventEntity401Response
		| UpdateOneBaseChoiceCastControllerEventEntity403Response
		| UpdateOneBaseChoiceCastControllerEventEntity404Response
		| UpdateOneBaseChoiceCastControllerEventEntity409Response
		| UpdateOneBaseChoiceCastControllerEventEntity422Response
		| UpdateOneBaseChoiceCastControllerEventEntity500Response
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.EventEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseChoiceCastControllerEventEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * ChoiceCastsApi - fetch parameter creator
 * @export
 */
export const ChoiceCastsApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetChoiceCastCandidates(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/vote`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetChoiceCastFromUser(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/get-casts-from-user/{userId}`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetVotesForChoiceCast(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/get-votes-from-cast/{castId}`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerResetVote(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/reset-vote/{id}`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerSubmitChoiceCast(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/submit-cast/{id}`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerVoteForChoiceCast(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast/vote-in-cast/{castId}`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Create a single EventEntity
		 * @param {Api.CreateChoiceCastDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseChoiceCastControllerEventEntity(request: Api.CreateChoiceCastDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseChoiceCastControllerEventEntity.');
			}

			let localVarPath = `/choice-cast`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single EventEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseChoiceCastControllerEventEntity(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling deleteOneBaseChoiceCastControllerEventEntity.');
			}

			let localVarPath = `/choice-cast/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple EventEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/choice-cast`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single EventEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (__params.slug === null || __params.slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling getOneBaseChoiceCastControllerEventEntity.');
			}

			let localVarPath = `/choice-cast/{slug}`
				.replace('{slug}', encodeURIComponent(String(__params.slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single EventEntity
		 * @param {string} slug
		 * @param {Api.EventEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseChoiceCastControllerEventEntity(slug: string, request: Api.EventEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling updateOneBaseChoiceCastControllerEventEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseChoiceCastControllerEventEntity.');
			}

			let localVarPath = `/choice-cast/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ChoiceCastsApi - functional programming interface
 * @export
 */
export const ChoiceCastsApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetChoiceCastCandidates(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerGetChoiceCastCandidatesResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerGetChoiceCastCandidates(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetChoiceCastFromUser(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerGetChoiceCastFromUserResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerGetChoiceCastFromUser(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerGetVotesForChoiceCast(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerGetVotesForChoiceCastResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerGetVotesForChoiceCast(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerResetVote(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerResetVoteResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerResetVote(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerSubmitChoiceCast(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerSubmitChoiceCastResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerSubmitChoiceCast(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		choiceCastControllerVoteForChoiceCast(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.ChoiceCastControllerVoteForChoiceCastResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).choiceCastControllerVoteForChoiceCast(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @summary Create a single EventEntity
		 * @param {Api.CreateChoiceCastDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseChoiceCastControllerEventEntity(request: Api.CreateChoiceCastDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.CreateOneBaseChoiceCastControllerEventEntityResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).createOneBaseChoiceCastControllerEventEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.EventEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single EventEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseChoiceCastControllerEventEntity(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.DeleteOneBaseChoiceCastControllerEventEntityResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).deleteOneBaseChoiceCastControllerEventEntity(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple EventEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).getManyBaseChoiceCastControllerEventEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyEventEntityResponseDto | Api.EventEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single EventEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).getOneBaseChoiceCastControllerEventEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.EventEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single EventEntity
		 * @param {string} slug
		 * @param {Api.EventEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseChoiceCastControllerEventEntity(slug: string, request: Api.EventEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ChoiceCastsApi.UpdateOneBaseChoiceCastControllerEventEntityResponse> {
			const localVarFetchArgs = ChoiceCastsApiFetchParamCreator(configuration).updateOneBaseChoiceCastControllerEventEntity(slug, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.EventEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * ChoiceCastsApi - factory interface
 * @export
 */
export const ChoiceCastsApiFactory: FactoryFunction<ChoiceCastsApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new ChoiceCastsApi(configuration, basePath, fetch);
};

/**
 * ChoiceCastsApi - interface
 * @export
 * @interface ChoiceCastsApi
 */
export interface ChoiceCastsApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerGetChoiceCastCandidates(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerGetChoiceCastCandidatesResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerGetChoiceCastFromUser(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerGetChoiceCastFromUserResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerGetVotesForChoiceCast(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerGetVotesForChoiceCastResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerResetVote(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerResetVoteResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerSubmitChoiceCast(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerSubmitChoiceCastResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	choiceCastControllerVoteForChoiceCast(options?: RequestInit): Promise<ChoiceCastsApi.ChoiceCastControllerVoteForChoiceCastResponse>

	/**
	 * @summary Create a single EventEntity
	 * @param {Api.CreateChoiceCastDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseChoiceCastControllerEventEntity(request: Api.CreateChoiceCastDto, options?: RequestInit): Promise<ChoiceCastsApi.CreateOneBaseChoiceCastControllerEventEntityResponse>

	/**
	 * @summary Delete a single EventEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseChoiceCastControllerEventEntity(slug: string, options?: RequestInit): Promise<ChoiceCastsApi.DeleteOneBaseChoiceCastControllerEventEntityResponse>

	/**
	 * @summary Retrieve multiple EventEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityParameters, options?: RequestInit): Promise<ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityResponse>

	/**
	 * @summary Retrieve a single EventEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityParameters, options?: RequestInit): Promise<ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityResponse>

	/**
	 * @summary Update a single EventEntity
	 * @param {string} slug
	 * @param {Api.EventEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseChoiceCastControllerEventEntity(slug: string, request: Api.EventEntity, options?: RequestInit): Promise<ChoiceCastsApi.UpdateOneBaseChoiceCastControllerEventEntityResponse>

}

/**
 * ChoiceCastsApi - object-oriented interface
 * @export
 * @class ChoiceCastsApi
 * @extends {BaseAPI}
 */
export class ChoiceCastsApi extends BaseAPI implements ChoiceCastsApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerGetChoiceCastCandidates(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerGetChoiceCastCandidates(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerGetChoiceCastFromUser(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerGetChoiceCastFromUser(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerGetVotesForChoiceCast(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerGetVotesForChoiceCast(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerResetVote(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerResetVote(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerSubmitChoiceCast(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerSubmitChoiceCast(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public choiceCastControllerVoteForChoiceCast(options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).choiceCastControllerVoteForChoiceCast(options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Create a single EventEntity
	 * @param {Api.CreateChoiceCastDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseChoiceCastControllerEventEntity(request: Api.CreateChoiceCastDto, options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).createOneBaseChoiceCastControllerEventEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single EventEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseChoiceCastControllerEventEntity(slug: string, options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).deleteOneBaseChoiceCastControllerEventEntity(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple EventEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetManyBaseChoiceCastControllerEventEntityParameters, options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).getManyBaseChoiceCastControllerEventEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single EventEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseChoiceCastControllerEventEntity(__params: ChoiceCastsApi.GetOneBaseChoiceCastControllerEventEntityParameters, options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).getOneBaseChoiceCastControllerEventEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single EventEntity
	 * @param {string} slug
	 * @param {Api.EventEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseChoiceCastControllerEventEntity(slug: string, request: Api.EventEntity, options?: RequestInit) {
		return ChoiceCastsApiFp(this.configuration).updateOneBaseChoiceCastControllerEventEntity(slug, request, options)(this.fetch, this.basePath);
	}

}
export namespace CompetitionsApi {
	export type CompetitionControllerFindChessMatchResultResponse =
		| CompetitionControllerFindChessMatchResult400Response
		| CompetitionControllerFindChessMatchResult401Response
		| CompetitionControllerFindChessMatchResult403Response
		| CompetitionControllerFindChessMatchResult404Response
		| CompetitionControllerFindChessMatchResult409Response
		| CompetitionControllerFindChessMatchResult422Response
		| CompetitionControllerFindChessMatchResult500Response
		| CompetitionControllerFindChessMatchResultDefaultResponse
	
	export interface CompetitionControllerFindChessMatchResult400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResult500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerFindChessMatchResultDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.MatchSearchResponseDto[]
		headers?: undefined
	}
	
	export type CompetitionControllerGetChessLeaderboardResponse =
		| CompetitionControllerGetChessLeaderboard400Response
		| CompetitionControllerGetChessLeaderboard401Response
		| CompetitionControllerGetChessLeaderboard403Response
		| CompetitionControllerGetChessLeaderboard404Response
		| CompetitionControllerGetChessLeaderboard409Response
		| CompetitionControllerGetChessLeaderboard422Response
		| CompetitionControllerGetChessLeaderboard500Response
		| CompetitionControllerGetChessLeaderboardDefaultResponse
	
	export interface CompetitionControllerGetChessLeaderboard400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboard500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessLeaderboardDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ChessLeaderboardResponseEntryDto[]
		headers?: undefined
	}
	
	export type CompetitionControllerGetChessMatchResultResponse =
		| CompetitionControllerGetChessMatchResult400Response
		| CompetitionControllerGetChessMatchResult401Response
		| CompetitionControllerGetChessMatchResult403Response
		| CompetitionControllerGetChessMatchResult404Response
		| CompetitionControllerGetChessMatchResult409Response
		| CompetitionControllerGetChessMatchResult422Response
		| CompetitionControllerGetChessMatchResult500Response
		| CompetitionControllerGetChessMatchResultDefaultResponse
	
	export interface CompetitionControllerGetChessMatchResult400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResult500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetChessMatchResultDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ChessMatchResultDto
		headers?: undefined
	}
	
	export type CompetitionControllerGetLatestChessCompetitionReportResponse =
		| CompetitionControllerGetLatestChessCompetitionReport400Response
		| CompetitionControllerGetLatestChessCompetitionReport401Response
		| CompetitionControllerGetLatestChessCompetitionReport403Response
		| CompetitionControllerGetLatestChessCompetitionReport404Response
		| CompetitionControllerGetLatestChessCompetitionReport409Response
		| CompetitionControllerGetLatestChessCompetitionReport422Response
		| CompetitionControllerGetLatestChessCompetitionReport500Response
		| CompetitionControllerGetLatestChessCompetitionReportDefaultResponse
	
	export interface CompetitionControllerGetLatestChessCompetitionReport400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReport500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerGetLatestChessCompetitionReportDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.CompetitionRunSubmissionReportEntity[]
		headers?: undefined
	}
	
	export type CompetitionControllerListChessAgentsResponse =
		| CompetitionControllerListChessAgents400Response
		| CompetitionControllerListChessAgents401Response
		| CompetitionControllerListChessAgents403Response
		| CompetitionControllerListChessAgents404Response
		| CompetitionControllerListChessAgents409Response
		| CompetitionControllerListChessAgents422Response
		| CompetitionControllerListChessAgents500Response
		| CompetitionControllerListChessAgentsDefaultResponse
	
	export interface CompetitionControllerListChessAgents400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgents500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerListChessAgentsDefaultResponse {
		status: number
		contentType: 'application/json'
		body: string[]
		headers?: undefined
	}
	
	export type CompetitionControllerRequestChessMoveResponse =
		| CompetitionControllerRequestChessMove400Response
		| CompetitionControllerRequestChessMove401Response
		| CompetitionControllerRequestChessMove403Response
		| CompetitionControllerRequestChessMove404Response
		| CompetitionControllerRequestChessMove409Response
		| CompetitionControllerRequestChessMove422Response
		| CompetitionControllerRequestChessMove500Response
		| CompetitionControllerRequestChessMoveDefaultResponse
	
	export interface CompetitionControllerRequestChessMove400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMove500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRequestChessMoveDefaultResponse {
		status: number
		contentType: 'application/json'
		body: string
		headers?: undefined
	}
	
	export type CompetitionControllerRunChessMatchResponse =
		| CompetitionControllerRunChessMatch400Response
		| CompetitionControllerRunChessMatch401Response
		| CompetitionControllerRunChessMatch403Response
		| CompetitionControllerRunChessMatch404Response
		| CompetitionControllerRunChessMatch409Response
		| CompetitionControllerRunChessMatch422Response
		| CompetitionControllerRunChessMatch500Response
		| CompetitionControllerRunChessMatchDefaultResponse
	
	export interface CompetitionControllerRunChessMatch400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatch500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunChessMatchDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ChessMatchResultDto
		headers?: undefined
	}
	
	export type CompetitionControllerRunCompetitionResponse =
		| CompetitionControllerRunCompetition400Response
		| CompetitionControllerRunCompetition401Response
		| CompetitionControllerRunCompetition403Response
		| CompetitionControllerRunCompetition404Response
		| CompetitionControllerRunCompetition409Response
		| CompetitionControllerRunCompetition422Response
		| CompetitionControllerRunCompetition500Response
	
	export interface CompetitionControllerRunCompetition400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerRunCompetition500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CompetitionControllerSubmitChessAgentResponse =
		| CompetitionControllerSubmitChessAgent400Response
		| CompetitionControllerSubmitChessAgent401Response
		| CompetitionControllerSubmitChessAgent403Response
		| CompetitionControllerSubmitChessAgent404Response
		| CompetitionControllerSubmitChessAgent409Response
		| CompetitionControllerSubmitChessAgent422Response
		| CompetitionControllerSubmitChessAgent500Response
		| CompetitionControllerSubmitChessAgentDefaultResponse
	
	export interface CompetitionControllerSubmitChessAgent400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgent500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CompetitionControllerSubmitChessAgentDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.TerminalDto[]
		headers?: undefined
	}
	
}

/**
 * CompetitionsApi - fetch parameter creator
 * @export
 */
export const CompetitionsApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {Api.MatchSearchRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerFindChessMatchResult(request: Api.MatchSearchRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling competitionControllerFindChessMatchResult.');
			}

			let localVarPath = `/Competitions/Chess/FindMatches`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetChessLeaderboard(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/Competitions/Chess/Leaderboard`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetChessMatchResult(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling competitionControllerGetChessMatchResult.');
			}

			let localVarPath = `/Competitions/Chess/Match/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetLatestChessCompetitionReport(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/Competitions/Chess/LatestCompetitionReport`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerListChessAgents(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/Competitions/Chess/ListAgents`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.ChessMoveRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRequestChessMove(request: Api.ChessMoveRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling competitionControllerRequestChessMove.');
			}

			let localVarPath = `/Competitions/Chess/Move`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.ChessMatchRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRunChessMatch(request: Api.ChessMatchRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling competitionControllerRunChessMatch.');
			}

			let localVarPath = `/Competitions/Chess/RunMatch`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRunCompetition(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/Competitions/Chess/RunCompetition`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerSubmitChessAgent(request: Api.CompetitionSubmissionDto.MultipartFormData | undefined, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/Competitions/Chess/submit`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'multipart/form-data');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				const localVarFormData = new FormData();
				if (request.file !== undefined) {
					localVarFormData.append('file', request.file.value);
				}
				localVarRequestOptions.body = localVarFormData;
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {Api.MatchSearchRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerFindChessMatchResult(request: Api.MatchSearchRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerFindChessMatchResultResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerFindChessMatchResult(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.MatchSearchResponseDto[],
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetChessLeaderboard(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerGetChessLeaderboardResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerGetChessLeaderboard(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ChessLeaderboardResponseEntryDto[],
					}
				}
				throw response;
			};
		},
		/**
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetChessMatchResult(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerGetChessMatchResultResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerGetChessMatchResult(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ChessMatchResultDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerGetLatestChessCompetitionReport(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerGetLatestChessCompetitionReportResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerGetLatestChessCompetitionReport(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.CompetitionRunSubmissionReportEntity[],
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerListChessAgents(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerListChessAgentsResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerListChessAgents(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as string[],
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.ChessMoveRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRequestChessMove(request: Api.ChessMoveRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerRequestChessMoveResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerRequestChessMove(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as string,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.ChessMatchRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRunChessMatch(request: Api.ChessMatchRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerRunChessMatchResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerRunChessMatch(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ChessMatchResultDto,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerRunCompetition(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerRunCompetitionResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerRunCompetition(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		competitionControllerSubmitChessAgent(request: Api.CompetitionSubmissionDto.MultipartFormData | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CompetitionsApi.CompetitionControllerSubmitChessAgentResponse> {
			const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionControllerSubmitChessAgent(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.TerminalDto[],
					}
				}
				throw response;
			};
		},
	}
};

/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory: FactoryFunction<CompetitionsApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new CompetitionsApi(configuration, basePath, fetch);
};

/**
 * CompetitionsApi - interface
 * @export
 * @interface CompetitionsApi
 */
export interface CompetitionsApiInterface {
	/**
	 * @param {Api.MatchSearchRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerFindChessMatchResult(request: Api.MatchSearchRequestDto, options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerFindChessMatchResultResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerGetChessLeaderboard(options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerGetChessLeaderboardResponse>

	/**
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerGetChessMatchResult(id: string, options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerGetChessMatchResultResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerGetLatestChessCompetitionReport(options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerGetLatestChessCompetitionReportResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerListChessAgents(options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerListChessAgentsResponse>

	/**
	 * @param {Api.ChessMoveRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerRequestChessMove(request: Api.ChessMoveRequestDto, options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerRequestChessMoveResponse>

	/**
	 * @param {Api.ChessMatchRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerRunChessMatch(request: Api.ChessMatchRequestDto, options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerRunChessMatchResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerRunCompetition(options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerRunCompetitionResponse>

	/**
	 * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	competitionControllerSubmitChessAgent(request: Api.CompetitionSubmissionDto.MultipartFormData | undefined, options?: RequestInit): Promise<CompetitionsApi.CompetitionControllerSubmitChessAgentResponse>

}

/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI implements CompetitionsApiInterface {
	/**
	 * @param {Api.MatchSearchRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerFindChessMatchResult(request: Api.MatchSearchRequestDto, options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerFindChessMatchResult(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerGetChessLeaderboard(options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerGetChessLeaderboard(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerGetChessMatchResult(id: string, options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerGetChessMatchResult(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerGetLatestChessCompetitionReport(options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerGetLatestChessCompetitionReport(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerListChessAgents(options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerListChessAgents(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.ChessMoveRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerRequestChessMove(request: Api.ChessMoveRequestDto, options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerRequestChessMove(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.ChessMatchRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerRunChessMatch(request: Api.ChessMatchRequestDto, options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerRunChessMatch(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerRunCompetition(options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerRunCompetition(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.CompetitionSubmissionDto.MultipartFormData} [request]
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public competitionControllerSubmitChessAgent(request: Api.CompetitionSubmissionDto.MultipartFormData | undefined, options?: RequestInit) {
		return CompetitionsApiFp(this.configuration).competitionControllerSubmitChessAgent(request, options)(this.fetch, this.basePath);
	}

}
export namespace ContentApi {
	export type ContentControllerCreateEmptyCourseResponse =
		| ContentControllerCreateEmptyCourse400Response
		| ContentControllerCreateEmptyCourse401Response
		| ContentControllerCreateEmptyCourse403Response
		| ContentControllerCreateEmptyCourse404Response
		| ContentControllerCreateEmptyCourse409Response
		| ContentControllerCreateEmptyCourse422Response
		| ContentControllerCreateEmptyCourse500Response
		| ContentControllerCreateEmptyCourseDefaultResponse
	
	export interface ContentControllerCreateEmptyCourse400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourse500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ContentControllerCreateEmptyCourseDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.CourseEntity
		headers?: undefined
	}
	
}

/**
 * ContentApi - fetch parameter creator
 * @export
 */
export const ContentApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		contentControllerCreateEmptyCourse(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/content/course/create`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		contentControllerCreateEmptyCourse(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ContentApi.ContentControllerCreateEmptyCourseResponse> {
			const localVarFetchArgs = ContentApiFetchParamCreator(configuration).contentControllerCreateEmptyCourse(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.CourseEntity,
					}
				}
				throw response;
			};
		},
	}
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory: FactoryFunction<ContentApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new ContentApi(configuration, basePath, fetch);
};

/**
 * ContentApi - interface
 * @export
 * @interface ContentApi
 */
export interface ContentApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	contentControllerCreateEmptyCourse(options?: RequestInit): Promise<ContentApi.ContentControllerCreateEmptyCourseResponse>

}

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI implements ContentApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public contentControllerCreateEmptyCourse(options?: RequestInit) {
		return ContentApiFp(this.configuration).contentControllerCreateEmptyCourse(options)(this.fetch, this.basePath);
	}

}
export namespace CoursesApi {
	export type CoursesControllerAddEditorResponse =
		| CoursesControllerAddEditor400Response
		| CoursesControllerAddEditor401Response
		| CoursesControllerAddEditor403Response
		| CoursesControllerAddEditor404Response
		| CoursesControllerAddEditor409Response
		| CoursesControllerAddEditor422Response
		| CoursesControllerAddEditor500Response
	
	export interface CoursesControllerAddEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerAddEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CoursesControllerICanEditResponse =
		| CoursesControllerICanEdit200Response
		| CoursesControllerICanEdit400Response
		| CoursesControllerICanEdit401Response
		| CoursesControllerICanEdit403Response
		| CoursesControllerICanEdit404Response
		| CoursesControllerICanEdit409Response
		| CoursesControllerICanEdit422Response
		| CoursesControllerICanEdit500Response
	
	export interface CoursesControllerICanEdit200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerICanEdit500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CoursesControllerOwnedByMeResponse =
		| CoursesControllerOwnedByMe200Response
		| CoursesControllerOwnedByMe400Response
		| CoursesControllerOwnedByMe401Response
		| CoursesControllerOwnedByMe403Response
		| CoursesControllerOwnedByMe404Response
		| CoursesControllerOwnedByMe409Response
		| CoursesControllerOwnedByMe422Response
		| CoursesControllerOwnedByMe500Response
	
	export interface CoursesControllerOwnedByMe200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerOwnedByMe500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CoursesControllerRemoveEditorResponse =
		| CoursesControllerRemoveEditor400Response
		| CoursesControllerRemoveEditor401Response
		| CoursesControllerRemoveEditor403Response
		| CoursesControllerRemoveEditor404Response
		| CoursesControllerRemoveEditor409Response
		| CoursesControllerRemoveEditor422Response
		| CoursesControllerRemoveEditor500Response
	
	export interface CoursesControllerRemoveEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerRemoveEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CoursesControllerSwitchOwnerResponse =
		| CoursesControllerSwitchOwner400Response
		| CoursesControllerSwitchOwner401Response
		| CoursesControllerSwitchOwner403Response
		| CoursesControllerSwitchOwner404Response
		| CoursesControllerSwitchOwner409Response
		| CoursesControllerSwitchOwner422Response
		| CoursesControllerSwitchOwner500Response
	
	export interface CoursesControllerSwitchOwner400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CoursesControllerSwitchOwner500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type CreateOneBaseCoursesControllerCourseEntityResponse =
		| CreateOneBaseCoursesControllerCourseEntity201Response
		| CreateOneBaseCoursesControllerCourseEntity400Response
		| CreateOneBaseCoursesControllerCourseEntity401Response
		| CreateOneBaseCoursesControllerCourseEntity403Response
		| CreateOneBaseCoursesControllerCourseEntity404Response
		| CreateOneBaseCoursesControllerCourseEntity409Response
		| CreateOneBaseCoursesControllerCourseEntity422Response
		| CreateOneBaseCoursesControllerCourseEntity500Response
	
	export interface CreateOneBaseCoursesControllerCourseEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.CourseEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseCoursesControllerCourseEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseCoursesControllerCourseEntityResponse =
		| DeleteOneBaseCoursesControllerCourseEntity200Response
		| DeleteOneBaseCoursesControllerCourseEntity400Response
		| DeleteOneBaseCoursesControllerCourseEntity401Response
		| DeleteOneBaseCoursesControllerCourseEntity403Response
		| DeleteOneBaseCoursesControllerCourseEntity404Response
		| DeleteOneBaseCoursesControllerCourseEntity409Response
		| DeleteOneBaseCoursesControllerCourseEntity422Response
		| DeleteOneBaseCoursesControllerCourseEntity500Response
	
	export interface DeleteOneBaseCoursesControllerCourseEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseCoursesControllerCourseEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseCoursesControllerCourseEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseCoursesControllerCourseEntityResponse =
		| GetManyBaseCoursesControllerCourseEntity200Response
		| GetManyBaseCoursesControllerCourseEntity400Response
		| GetManyBaseCoursesControllerCourseEntity422Response
		| GetManyBaseCoursesControllerCourseEntity500Response
	
	export interface GetManyBaseCoursesControllerCourseEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyCourseEntityResponseDto | Api.CourseEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseCoursesControllerCourseEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseCoursesControllerCourseEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseCoursesControllerCourseEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseCoursesControllerCourseEntityParameters {
		slug: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseCoursesControllerCourseEntityResponse =
		| GetOneBaseCoursesControllerCourseEntity200Response
		| GetOneBaseCoursesControllerCourseEntity400Response
		| GetOneBaseCoursesControllerCourseEntity422Response
		| GetOneBaseCoursesControllerCourseEntity500Response
	
	export interface GetOneBaseCoursesControllerCourseEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.CourseEntity
		headers?: undefined
	}
	
	export interface GetOneBaseCoursesControllerCourseEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseCoursesControllerCourseEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseCoursesControllerCourseEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseCoursesControllerCourseEntityResponse =
		| UpdateOneBaseCoursesControllerCourseEntity200Response
		| UpdateOneBaseCoursesControllerCourseEntity400Response
		| UpdateOneBaseCoursesControllerCourseEntity401Response
		| UpdateOneBaseCoursesControllerCourseEntity403Response
		| UpdateOneBaseCoursesControllerCourseEntity404Response
		| UpdateOneBaseCoursesControllerCourseEntity409Response
		| UpdateOneBaseCoursesControllerCourseEntity422Response
		| UpdateOneBaseCoursesControllerCourseEntity500Response
	
	export interface UpdateOneBaseCoursesControllerCourseEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.CourseEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseCoursesControllerCourseEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * CoursesApi - fetch parameter creator
 * @export
 */
export const CoursesApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerAddEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling coursesControllerAddEditor.');
			}

			let localVarPath = `/courses/add-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerICanEdit(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/courses/get-editable-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerOwnedByMe(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/courses/get-owned-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerRemoveEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling coursesControllerRemoveEditor.');
			}

			let localVarPath = `/courses/remove-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling coursesControllerSwitchOwner.');
			}

			let localVarPath = `/courses/transfer-ownership`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Create a single CourseEntity
		 * @param {Api.CourseEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseCoursesControllerCourseEntity(request: Api.CourseEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseCoursesControllerCourseEntity.');
			}

			let localVarPath = `/courses`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single CourseEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseCoursesControllerCourseEntity(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling deleteOneBaseCoursesControllerCourseEntity.');
			}

			let localVarPath = `/courses/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple CourseEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseCoursesControllerCourseEntity(__params: CoursesApi.GetManyBaseCoursesControllerCourseEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/courses`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single CourseEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseCoursesControllerCourseEntity(__params: CoursesApi.GetOneBaseCoursesControllerCourseEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (__params.slug === null || __params.slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling getOneBaseCoursesControllerCourseEntity.');
			}

			let localVarPath = `/courses/{slug}`
				.replace('{slug}', encodeURIComponent(String(__params.slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single CourseEntity
		 * @param {string} slug
		 * @param {Api.CourseEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseCoursesControllerCourseEntity(slug: string, request: Api.CourseEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling updateOneBaseCoursesControllerCourseEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseCoursesControllerCourseEntity.');
			}

			let localVarPath = `/courses/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CoursesControllerAddEditorResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).coursesControllerAddEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerICanEdit(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CoursesControllerICanEditResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).coursesControllerICanEdit(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerOwnedByMe(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CoursesControllerOwnedByMeResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).coursesControllerOwnedByMe(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CoursesControllerRemoveEditorResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).coursesControllerRemoveEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		coursesControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CoursesControllerSwitchOwnerResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).coursesControllerSwitchOwner(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Create a single CourseEntity
		 * @param {Api.CourseEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseCoursesControllerCourseEntity(request: Api.CourseEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.CreateOneBaseCoursesControllerCourseEntityResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).createOneBaseCoursesControllerCourseEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.CourseEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single CourseEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseCoursesControllerCourseEntity(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.DeleteOneBaseCoursesControllerCourseEntityResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).deleteOneBaseCoursesControllerCourseEntity(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple CourseEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseCoursesControllerCourseEntity(__params: CoursesApi.GetManyBaseCoursesControllerCourseEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.GetManyBaseCoursesControllerCourseEntityResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).getManyBaseCoursesControllerCourseEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyCourseEntityResponseDto | Api.CourseEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single CourseEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseCoursesControllerCourseEntity(__params: CoursesApi.GetOneBaseCoursesControllerCourseEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.GetOneBaseCoursesControllerCourseEntityResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).getOneBaseCoursesControllerCourseEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.CourseEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single CourseEntity
		 * @param {string} slug
		 * @param {Api.CourseEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseCoursesControllerCourseEntity(slug: string, request: Api.CourseEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<CoursesApi.UpdateOneBaseCoursesControllerCourseEntityResponse> {
			const localVarFetchArgs = CoursesApiFetchParamCreator(configuration).updateOneBaseCoursesControllerCourseEntity(slug, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.CourseEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory: FactoryFunction<CoursesApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new CoursesApi(configuration, basePath, fetch);
};

/**
 * CoursesApi - interface
 * @export
 * @interface CoursesApi
 */
export interface CoursesApiInterface {
	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	coursesControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<CoursesApi.CoursesControllerAddEditorResponse>

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	coursesControllerICanEdit(options?: RequestInit): Promise<CoursesApi.CoursesControllerICanEditResponse>

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	coursesControllerOwnedByMe(options?: RequestInit): Promise<CoursesApi.CoursesControllerOwnedByMeResponse>

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	coursesControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<CoursesApi.CoursesControllerRemoveEditorResponse>

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	coursesControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): Promise<CoursesApi.CoursesControllerSwitchOwnerResponse>

	/**
	 * @summary Create a single CourseEntity
	 * @param {Api.CourseEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseCoursesControllerCourseEntity(request: Api.CourseEntity, options?: RequestInit): Promise<CoursesApi.CreateOneBaseCoursesControllerCourseEntityResponse>

	/**
	 * @summary Delete a single CourseEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseCoursesControllerCourseEntity(slug: string, options?: RequestInit): Promise<CoursesApi.DeleteOneBaseCoursesControllerCourseEntityResponse>

	/**
	 * @summary Retrieve multiple CourseEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseCoursesControllerCourseEntity(__params: CoursesApi.GetManyBaseCoursesControllerCourseEntityParameters, options?: RequestInit): Promise<CoursesApi.GetManyBaseCoursesControllerCourseEntityResponse>

	/**
	 * @summary Retrieve a single CourseEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseCoursesControllerCourseEntity(__params: CoursesApi.GetOneBaseCoursesControllerCourseEntityParameters, options?: RequestInit): Promise<CoursesApi.GetOneBaseCoursesControllerCourseEntityResponse>

	/**
	 * @summary Update a single CourseEntity
	 * @param {string} slug
	 * @param {Api.CourseEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseCoursesControllerCourseEntity(slug: string, request: Api.CourseEntity, options?: RequestInit): Promise<CoursesApi.UpdateOneBaseCoursesControllerCourseEntityResponse>

}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI implements CoursesApiInterface {
	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coursesControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return CoursesApiFp(this.configuration).coursesControllerAddEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coursesControllerICanEdit(options?: RequestInit) {
		return CoursesApiFp(this.configuration).coursesControllerICanEdit(options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coursesControllerOwnedByMe(options?: RequestInit) {
		return CoursesApiFp(this.configuration).coursesControllerOwnedByMe(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coursesControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return CoursesApiFp(this.configuration).coursesControllerRemoveEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public coursesControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit) {
		return CoursesApiFp(this.configuration).coursesControllerSwitchOwner(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Create a single CourseEntity
	 * @param {Api.CourseEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseCoursesControllerCourseEntity(request: Api.CourseEntity, options?: RequestInit) {
		return CoursesApiFp(this.configuration).createOneBaseCoursesControllerCourseEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single CourseEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseCoursesControllerCourseEntity(slug: string, options?: RequestInit) {
		return CoursesApiFp(this.configuration).deleteOneBaseCoursesControllerCourseEntity(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple CourseEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseCoursesControllerCourseEntity(__params: CoursesApi.GetManyBaseCoursesControllerCourseEntityParameters, options?: RequestInit) {
		return CoursesApiFp(this.configuration).getManyBaseCoursesControllerCourseEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single CourseEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseCoursesControllerCourseEntity(__params: CoursesApi.GetOneBaseCoursesControllerCourseEntityParameters, options?: RequestInit) {
		return CoursesApiFp(this.configuration).getOneBaseCoursesControllerCourseEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single CourseEntity
	 * @param {string} slug
	 * @param {Api.CourseEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseCoursesControllerCourseEntity(slug: string, request: Api.CourseEntity, options?: RequestInit) {
		return CoursesApiFp(this.configuration).updateOneBaseCoursesControllerCourseEntity(slug, request, options)(this.fetch, this.basePath);
	}

}
export namespace HealthcheckApi {
	export type HealthcheckControllerDbResponse =
		| HealthcheckControllerDb200Response
		| HealthcheckControllerDb500Response
	
	export interface HealthcheckControllerDb200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface HealthcheckControllerDb500Response {
		status: 500
		body?: undefined
		headers?: undefined
	}
	
	export type HealthcheckControllerGitstatsResponse =
		| HealthcheckControllerGitstats200Response
	
	export interface HealthcheckControllerGitstats200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GitStats[]
		headers?: undefined
	}
	
	export type HealthcheckControllerRedisResponse =
		| HealthcheckControllerRedis200Response
		| HealthcheckControllerRedis500Response
	
	export interface HealthcheckControllerRedis200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface HealthcheckControllerRedis500Response {
		status: 500
		body?: undefined
		headers?: undefined
	}
	
	export type HealthcheckControllerS3Response =
		| HealthcheckControllerS3200Response
		| HealthcheckControllerS3500Response
	
	export interface HealthcheckControllerS3200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface HealthcheckControllerS3500Response {
		status: 500
		body?: undefined
		headers?: undefined
	}
	
}

/**
 * HealthcheckApi - fetch parameter creator
 * @export
 */
export const HealthcheckApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerDb(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/healthcheck/db`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerGitstats(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/healthcheck/gitstats`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerRedis(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/healthcheck/redis`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerS3(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/healthcheck/s3`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerDb(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<HealthcheckApi.HealthcheckControllerDbResponse> {
			const localVarFetchArgs = HealthcheckApiFetchParamCreator(configuration).healthcheckControllerDb(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 500) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerGitstats(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<HealthcheckApi.HealthcheckControllerGitstatsResponse> {
			const localVarFetchArgs = HealthcheckApiFetchParamCreator(configuration).healthcheckControllerGitstats(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GitStats[],
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerRedis(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<HealthcheckApi.HealthcheckControllerRedisResponse> {
			const localVarFetchArgs = HealthcheckApiFetchParamCreator(configuration).healthcheckControllerRedis(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 500) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthcheckControllerS3(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<HealthcheckApi.HealthcheckControllerS3Response> {
			const localVarFetchArgs = HealthcheckApiFetchParamCreator(configuration).healthcheckControllerS3(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 500) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
	}
};

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory: FactoryFunction<HealthcheckApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new HealthcheckApi(configuration, basePath, fetch);
};

/**
 * HealthcheckApi - interface
 * @export
 * @interface HealthcheckApi
 */
export interface HealthcheckApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	healthcheckControllerDb(options?: RequestInit): Promise<HealthcheckApi.HealthcheckControllerDbResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	healthcheckControllerGitstats(options?: RequestInit): Promise<HealthcheckApi.HealthcheckControllerGitstatsResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	healthcheckControllerRedis(options?: RequestInit): Promise<HealthcheckApi.HealthcheckControllerRedisResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	healthcheckControllerS3(options?: RequestInit): Promise<HealthcheckApi.HealthcheckControllerS3Response>

}

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI implements HealthcheckApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public healthcheckControllerDb(options?: RequestInit) {
		return HealthcheckApiFp(this.configuration).healthcheckControllerDb(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public healthcheckControllerGitstats(options?: RequestInit) {
		return HealthcheckApiFp(this.configuration).healthcheckControllerGitstats(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public healthcheckControllerRedis(options?: RequestInit) {
		return HealthcheckApiFp(this.configuration).healthcheckControllerRedis(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public healthcheckControllerS3(options?: RequestInit) {
		return HealthcheckApiFp(this.configuration).healthcheckControllerS3(options)(this.fetch, this.basePath);
	}

}
export namespace JobApplicationsApi {
	export type CreateOneBaseJobApplicationControllerJobApplicationEntityResponse =
		| CreateOneBaseJobApplicationControllerJobApplicationEntity201Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity400Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity401Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity403Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity404Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity409Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity422Response
		| CreateOneBaseJobApplicationControllerJobApplicationEntity500Response
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobApplicationControllerJobApplicationEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseJobApplicationControllerJobApplicationEntityResponse =
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity200Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity400Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity401Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity403Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity404Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity409Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity422Response
		| DeleteOneBaseJobApplicationControllerJobApplicationEntity500Response
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobApplicationControllerJobApplicationEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseJobApplicationControllerJobApplicationEntityResponse =
		| GetManyBaseJobApplicationControllerJobApplicationEntity200Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity400Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity401Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity403Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity404Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity409Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity422Response
		| GetManyBaseJobApplicationControllerJobApplicationEntity500Response
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyJobApplicationEntityResponseDto | Api.JobApplicationEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobApplicationControllerJobApplicationEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseJobApplicationControllerJobApplicationEntityResponse =
		| GetOneBaseJobApplicationControllerJobApplicationEntity200Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity400Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity401Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity403Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity404Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity409Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity422Response
		| GetOneBaseJobApplicationControllerJobApplicationEntity500Response
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobApplicationControllerJobApplicationEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerAdvanceCandidateResponse =
		| JobApplicationControllerAdvanceCandidate200Response
		| JobApplicationControllerAdvanceCandidate400Response
		| JobApplicationControllerAdvanceCandidate401Response
		| JobApplicationControllerAdvanceCandidate403Response
		| JobApplicationControllerAdvanceCandidate404Response
		| JobApplicationControllerAdvanceCandidate409Response
		| JobApplicationControllerAdvanceCandidate422Response
		| JobApplicationControllerAdvanceCandidate500Response
	
	export interface JobApplicationControllerAdvanceCandidate200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerAdvanceCandidate500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerMoveBackCandidateResponse =
		| JobApplicationControllerMoveBackCandidate200Response
		| JobApplicationControllerMoveBackCandidate400Response
		| JobApplicationControllerMoveBackCandidate401Response
		| JobApplicationControllerMoveBackCandidate403Response
		| JobApplicationControllerMoveBackCandidate404Response
		| JobApplicationControllerMoveBackCandidate409Response
		| JobApplicationControllerMoveBackCandidate422Response
		| JobApplicationControllerMoveBackCandidate500Response
	
	export interface JobApplicationControllerMoveBackCandidate200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMoveBackCandidate500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerMyApplicationBySlugResponse =
		| JobApplicationControllerMyApplicationBySlug200Response
		| JobApplicationControllerMyApplicationBySlug400Response
		| JobApplicationControllerMyApplicationBySlug401Response
		| JobApplicationControllerMyApplicationBySlug403Response
		| JobApplicationControllerMyApplicationBySlug404Response
		| JobApplicationControllerMyApplicationBySlug409Response
		| JobApplicationControllerMyApplicationBySlug422Response
		| JobApplicationControllerMyApplicationBySlug500Response
	
	export interface JobApplicationControllerMyApplicationBySlug200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplicationBySlug500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerMyApplicationsResponse =
		| JobApplicationControllerMyApplications200Response
		| JobApplicationControllerMyApplications400Response
		| JobApplicationControllerMyApplications401Response
		| JobApplicationControllerMyApplications403Response
		| JobApplicationControllerMyApplications404Response
		| JobApplicationControllerMyApplications409Response
		| JobApplicationControllerMyApplications422Response
		| JobApplicationControllerMyApplications500Response
	
	export interface JobApplicationControllerMyApplications200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity[]
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerMyApplications500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerRejectCandidateResponse =
		| JobApplicationControllerRejectCandidate200Response
		| JobApplicationControllerRejectCandidate400Response
		| JobApplicationControllerRejectCandidate401Response
		| JobApplicationControllerRejectCandidate403Response
		| JobApplicationControllerRejectCandidate404Response
		| JobApplicationControllerRejectCandidate409Response
		| JobApplicationControllerRejectCandidate422Response
		| JobApplicationControllerRejectCandidate500Response
	
	export interface JobApplicationControllerRejectCandidate200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerRejectCandidate500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerUndoRejectCandidateResponse =
		| JobApplicationControllerUndoRejectCandidate200Response
		| JobApplicationControllerUndoRejectCandidate400Response
		| JobApplicationControllerUndoRejectCandidate401Response
		| JobApplicationControllerUndoRejectCandidate403Response
		| JobApplicationControllerUndoRejectCandidate404Response
		| JobApplicationControllerUndoRejectCandidate409Response
		| JobApplicationControllerUndoRejectCandidate422Response
		| JobApplicationControllerUndoRejectCandidate500Response
	
	export interface JobApplicationControllerUndoRejectCandidate200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerUndoRejectCandidate500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobApplicationControllerWithdrawResponse =
		| JobApplicationControllerWithdraw200Response
		| JobApplicationControllerWithdraw400Response
		| JobApplicationControllerWithdraw401Response
		| JobApplicationControllerWithdraw403Response
		| JobApplicationControllerWithdraw404Response
		| JobApplicationControllerWithdraw409Response
		| JobApplicationControllerWithdraw422Response
		| JobApplicationControllerWithdraw500Response
	
	export interface JobApplicationControllerWithdraw200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobApplicationControllerWithdraw500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseJobApplicationControllerJobApplicationEntityResponse =
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity200Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity400Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity401Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity403Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity404Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity409Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity422Response
		| UpdateOneBaseJobApplicationControllerJobApplicationEntity500Response
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobApplicationEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobApplicationControllerJobApplicationEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * JobApplicationsApi - fetch parameter creator
 * @export
 */
export const JobApplicationsApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobApplicationEntity
		 * @param {Api.JobAplicationCreateDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobApplicationControllerJobApplicationEntity(request: Api.JobAplicationCreateDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseJobApplicationControllerJobApplicationEntity.');
			}

			let localVarPath = `/job-applications`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single JobApplicationEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobApplicationControllerJobApplicationEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseJobApplicationControllerJobApplicationEntity.');
			}

			let localVarPath = `/job-applications/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple JobApplicationEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-applications`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single JobApplicationEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseJobApplicationControllerJobApplicationEntity.');
			}

			let localVarPath = `/job-applications/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerAdvanceCandidate(request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobApplicationControllerAdvanceCandidate.');
			}

			let localVarPath = `/job-applications/advance-candidate`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMoveBackCandidate(request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobApplicationControllerMoveBackCandidate.');
			}

			let localVarPath = `/job-applications/undo-advance-candidate`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMyApplicationBySlug(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling jobApplicationControllerMyApplicationBySlug.');
			}

			let localVarPath = `/job-applications/my-application-by-slug/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMyApplications(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-applications/my-applications`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerRejectCandidate(request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobApplicationControllerRejectCandidate.');
			}

			let localVarPath = `/job-applications/reject-candidate`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerUndoRejectCandidate(request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobApplicationControllerUndoRejectCandidate.');
			}

			let localVarPath = `/job-applications/undo-reject-candidate`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerWithdraw(request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobApplicationControllerWithdraw.');
			}

			let localVarPath = `/job-applications/withdraw`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single JobApplicationEntity
		 * @param {string} id
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobApplicationControllerJobApplicationEntity(id: string, request: Api.JobApplicationEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOneBaseJobApplicationControllerJobApplicationEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseJobApplicationControllerJobApplicationEntity.');
			}

			let localVarPath = `/job-applications/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * JobApplicationsApi - functional programming interface
 * @export
 */
export const JobApplicationsApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobApplicationEntity
		 * @param {Api.JobAplicationCreateDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobApplicationControllerJobApplicationEntity(request: Api.JobAplicationCreateDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.CreateOneBaseJobApplicationControllerJobApplicationEntityResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).createOneBaseJobApplicationControllerJobApplicationEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single JobApplicationEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobApplicationControllerJobApplicationEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.DeleteOneBaseJobApplicationControllerJobApplicationEntityResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).deleteOneBaseJobApplicationControllerJobApplicationEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple JobApplicationEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).getManyBaseJobApplicationControllerJobApplicationEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyJobApplicationEntityResponseDto | Api.JobApplicationEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single JobApplicationEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).getOneBaseJobApplicationControllerJobApplicationEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerAdvanceCandidate(request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerAdvanceCandidateResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerAdvanceCandidate(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMoveBackCandidate(request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerMoveBackCandidateResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerMoveBackCandidate(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMyApplicationBySlug(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerMyApplicationBySlugResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerMyApplicationBySlug(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerMyApplications(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerMyApplicationsResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerMyApplications(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerRejectCandidateResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerRejectCandidate(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerUndoRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerUndoRejectCandidateResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerUndoRejectCandidate(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobApplicationControllerWithdraw(request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.JobApplicationControllerWithdrawResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).jobApplicationControllerWithdraw(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single JobApplicationEntity
		 * @param {string} id
		 * @param {Api.JobApplicationEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobApplicationControllerJobApplicationEntity(id: string, request: Api.JobApplicationEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobApplicationsApi.UpdateOneBaseJobApplicationControllerJobApplicationEntityResponse> {
			const localVarFetchArgs = JobApplicationsApiFetchParamCreator(configuration).updateOneBaseJobApplicationControllerJobApplicationEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobApplicationEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * JobApplicationsApi - factory interface
 * @export
 */
export const JobApplicationsApiFactory: FactoryFunction<JobApplicationsApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new JobApplicationsApi(configuration, basePath, fetch);
};

/**
 * JobApplicationsApi - interface
 * @export
 * @interface JobApplicationsApi
 */
export interface JobApplicationsApiInterface {
	/**
	 * @summary Create a single JobApplicationEntity
	 * @param {Api.JobAplicationCreateDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseJobApplicationControllerJobApplicationEntity(request: Api.JobAplicationCreateDto, options?: RequestInit): Promise<JobApplicationsApi.CreateOneBaseJobApplicationControllerJobApplicationEntityResponse>

	/**
	 * @summary Delete a single JobApplicationEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseJobApplicationControllerJobApplicationEntity(id: string, options?: RequestInit): Promise<JobApplicationsApi.DeleteOneBaseJobApplicationControllerJobApplicationEntityResponse>

	/**
	 * @summary Retrieve multiple JobApplicationEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit): Promise<JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityResponse>

	/**
	 * @summary Retrieve a single JobApplicationEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit): Promise<JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityResponse>

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerAdvanceCandidate(request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerAdvanceCandidateResponse>

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerMoveBackCandidate(request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerMoveBackCandidateResponse>

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerMyApplicationBySlug(slug: string, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerMyApplicationBySlugResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerMyApplications(options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerMyApplicationsResponse>

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerRejectCandidateResponse>

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerUndoRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerUndoRejectCandidateResponse>

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobApplicationControllerWithdraw(request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.JobApplicationControllerWithdrawResponse>

	/**
	 * @summary Update a single JobApplicationEntity
	 * @param {string} id
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseJobApplicationControllerJobApplicationEntity(id: string, request: Api.JobApplicationEntity, options?: RequestInit): Promise<JobApplicationsApi.UpdateOneBaseJobApplicationControllerJobApplicationEntityResponse>

}

/**
 * JobApplicationsApi - object-oriented interface
 * @export
 * @class JobApplicationsApi
 * @extends {BaseAPI}
 */
export class JobApplicationsApi extends BaseAPI implements JobApplicationsApiInterface {
	/**
	 * @summary Create a single JobApplicationEntity
	 * @param {Api.JobAplicationCreateDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseJobApplicationControllerJobApplicationEntity(request: Api.JobAplicationCreateDto, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).createOneBaseJobApplicationControllerJobApplicationEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single JobApplicationEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseJobApplicationControllerJobApplicationEntity(id: string, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).deleteOneBaseJobApplicationControllerJobApplicationEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple JobApplicationEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetManyBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).getManyBaseJobApplicationControllerJobApplicationEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single JobApplicationEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseJobApplicationControllerJobApplicationEntity(__params: JobApplicationsApi.GetOneBaseJobApplicationControllerJobApplicationEntityParameters, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).getOneBaseJobApplicationControllerJobApplicationEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerAdvanceCandidate(request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerAdvanceCandidate(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerMoveBackCandidate(request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerMoveBackCandidate(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerMyApplicationBySlug(slug: string, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerMyApplicationBySlug(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerMyApplications(options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerMyApplications(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerRejectCandidate(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerUndoRejectCandidate(request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerUndoRejectCandidate(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobApplicationControllerWithdraw(request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).jobApplicationControllerWithdraw(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single JobApplicationEntity
	 * @param {string} id
	 * @param {Api.JobApplicationEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseJobApplicationControllerJobApplicationEntity(id: string, request: Api.JobApplicationEntity, options?: RequestInit) {
		return JobApplicationsApiFp(this.configuration).updateOneBaseJobApplicationControllerJobApplicationEntity(id, request, options)(this.fetch, this.basePath);
	}

}
export namespace JobPostsApi {
	export type CreateOneBaseJobPostControllerJobPostEntityResponse =
		| CreateOneBaseJobPostControllerJobPostEntity201Response
		| CreateOneBaseJobPostControllerJobPostEntity400Response
		| CreateOneBaseJobPostControllerJobPostEntity401Response
		| CreateOneBaseJobPostControllerJobPostEntity403Response
		| CreateOneBaseJobPostControllerJobPostEntity404Response
		| CreateOneBaseJobPostControllerJobPostEntity409Response
		| CreateOneBaseJobPostControllerJobPostEntity422Response
		| CreateOneBaseJobPostControllerJobPostEntity500Response
	
	export interface CreateOneBaseJobPostControllerJobPostEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.JobPostEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobPostControllerJobPostEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseJobPostControllerJobPostEntityResponse =
		| DeleteOneBaseJobPostControllerJobPostEntity200Response
		| DeleteOneBaseJobPostControllerJobPostEntity400Response
		| DeleteOneBaseJobPostControllerJobPostEntity401Response
		| DeleteOneBaseJobPostControllerJobPostEntity403Response
		| DeleteOneBaseJobPostControllerJobPostEntity404Response
		| DeleteOneBaseJobPostControllerJobPostEntity409Response
		| DeleteOneBaseJobPostControllerJobPostEntity422Response
		| DeleteOneBaseJobPostControllerJobPostEntity500Response
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobPostControllerJobPostEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobPostControllerJobPostEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseJobPostControllerJobPostEntityResponse =
		| GetManyBaseJobPostControllerJobPostEntity200Response
	
	export interface GetManyBaseJobPostControllerJobPostEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyJobPostEntityResponseDto | Api.JobPostEntity[]
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseJobPostControllerJobPostEntityResponse =
		| GetOneBaseJobPostControllerJobPostEntity200Response
		| GetOneBaseJobPostControllerJobPostEntity400Response
		| GetOneBaseJobPostControllerJobPostEntity401Response
		| GetOneBaseJobPostControllerJobPostEntity403Response
		| GetOneBaseJobPostControllerJobPostEntity404Response
		| GetOneBaseJobPostControllerJobPostEntity409Response
		| GetOneBaseJobPostControllerJobPostEntity422Response
		| GetOneBaseJobPostControllerJobPostEntity500Response
	
	export interface GetOneBaseJobPostControllerJobPostEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobPostEntity
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobPostControllerJobPostEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerAddEditorResponse =
		| JobPostControllerAddEditor400Response
		| JobPostControllerAddEditor401Response
		| JobPostControllerAddEditor403Response
		| JobPostControllerAddEditor404Response
		| JobPostControllerAddEditor409Response
		| JobPostControllerAddEditor422Response
		| JobPostControllerAddEditor500Response
	
	export interface JobPostControllerAddEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerAddEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerGetBySlugResponse =
		| JobPostControllerGetBySlug200Response
		| JobPostControllerGetBySlug400Response
		| JobPostControllerGetBySlug401Response
		| JobPostControllerGetBySlug403Response
		| JobPostControllerGetBySlug404Response
		| JobPostControllerGetBySlug409Response
		| JobPostControllerGetBySlug422Response
		| JobPostControllerGetBySlug500Response
	
	export interface JobPostControllerGetBySlug200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobPostEntity
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlug500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerGetBySlugForOwnerResponse =
		| JobPostControllerGetBySlugForOwner200Response
		| JobPostControllerGetBySlugForOwner400Response
		| JobPostControllerGetBySlugForOwner401Response
		| JobPostControllerGetBySlugForOwner403Response
		| JobPostControllerGetBySlugForOwner404Response
		| JobPostControllerGetBySlugForOwner409Response
		| JobPostControllerGetBySlugForOwner422Response
		| JobPostControllerGetBySlugForOwner500Response
	
	export interface JobPostControllerGetBySlugForOwner200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobPostEntity
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetBySlugForOwner500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithAppliedParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type JobPostControllerGetManyWithAppliedResponse =
		| JobPostControllerGetManyWithApplied200Response
		| JobPostControllerGetManyWithApplied400Response
		| JobPostControllerGetManyWithApplied401Response
		| JobPostControllerGetManyWithApplied403Response
		| JobPostControllerGetManyWithApplied404Response
		| JobPostControllerGetManyWithApplied409Response
		| JobPostControllerGetManyWithApplied422Response
		| JobPostControllerGetManyWithApplied500Response
	
	export interface JobPostControllerGetManyWithApplied200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobPostWithAppliedDto[]
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerGetManyWithApplied500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerICanEditResponse =
		| JobPostControllerICanEdit200Response
		| JobPostControllerICanEdit400Response
		| JobPostControllerICanEdit401Response
		| JobPostControllerICanEdit403Response
		| JobPostControllerICanEdit404Response
		| JobPostControllerICanEdit409Response
		| JobPostControllerICanEdit422Response
		| JobPostControllerICanEdit500Response
	
	export interface JobPostControllerICanEdit200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerICanEdit500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerOwnedByMeResponse =
		| JobPostControllerOwnedByMe200Response
		| JobPostControllerOwnedByMe400Response
		| JobPostControllerOwnedByMe401Response
		| JobPostControllerOwnedByMe403Response
		| JobPostControllerOwnedByMe404Response
		| JobPostControllerOwnedByMe409Response
		| JobPostControllerOwnedByMe422Response
		| JobPostControllerOwnedByMe500Response
	
	export interface JobPostControllerOwnedByMe200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerOwnedByMe500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerRemoveEditorResponse =
		| JobPostControllerRemoveEditor400Response
		| JobPostControllerRemoveEditor401Response
		| JobPostControllerRemoveEditor403Response
		| JobPostControllerRemoveEditor404Response
		| JobPostControllerRemoveEditor409Response
		| JobPostControllerRemoveEditor422Response
		| JobPostControllerRemoveEditor500Response
	
	export interface JobPostControllerRemoveEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerRemoveEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type JobPostControllerSwitchOwnerResponse =
		| JobPostControllerSwitchOwner400Response
		| JobPostControllerSwitchOwner401Response
		| JobPostControllerSwitchOwner403Response
		| JobPostControllerSwitchOwner404Response
		| JobPostControllerSwitchOwner409Response
		| JobPostControllerSwitchOwner422Response
		| JobPostControllerSwitchOwner500Response
	
	export interface JobPostControllerSwitchOwner400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface JobPostControllerSwitchOwner500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseJobPostControllerJobPostEntityResponse =
		| UpdateOneBaseJobPostControllerJobPostEntity200Response
		| UpdateOneBaseJobPostControllerJobPostEntity400Response
		| UpdateOneBaseJobPostControllerJobPostEntity401Response
		| UpdateOneBaseJobPostControllerJobPostEntity403Response
		| UpdateOneBaseJobPostControllerJobPostEntity404Response
		| UpdateOneBaseJobPostControllerJobPostEntity409Response
		| UpdateOneBaseJobPostControllerJobPostEntity422Response
		| UpdateOneBaseJobPostControllerJobPostEntity500Response
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobPostEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobPostControllerJobPostEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * JobPostsApi - fetch parameter creator
 * @export
 */
export const JobPostsApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobPostEntity
		 * @param {Api.JobPostCreateDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobPostControllerJobPostEntity(request: Api.JobPostCreateDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseJobPostControllerJobPostEntity.');
			}

			let localVarPath = `/job-posts`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single JobPostEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobPostControllerJobPostEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseJobPostControllerJobPostEntity.');
			}

			let localVarPath = `/job-posts/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple JobPostEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetManyBaseJobPostControllerJobPostEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-posts`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single JobPostEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetOneBaseJobPostControllerJobPostEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseJobPostControllerJobPostEntity.');
			}

			let localVarPath = `/job-posts/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerAddEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobPostControllerAddEditor.');
			}

			let localVarPath = `/job-posts/add-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetBySlug(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling jobPostControllerGetBySlug.');
			}

			let localVarPath = `/job-posts/get-by-slug/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetBySlugForOwner(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling jobPostControllerGetBySlugForOwner.');
			}

			let localVarPath = `/job-posts/get-by-slug-for-owner/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetManyWithApplied(__params: JobPostsApi.JobPostControllerGetManyWithAppliedParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-posts/get-many-with-applied`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerICanEdit(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-posts/get-editable-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerOwnedByMe(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-posts/get-owned-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerRemoveEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobPostControllerRemoveEditor.');
			}

			let localVarPath = `/job-posts/remove-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling jobPostControllerSwitchOwner.');
			}

			let localVarPath = `/job-posts/transfer-ownership`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single JobPostEntity
		 * @param {string} id
		 * @param {Api.JobPostEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobPostControllerJobPostEntity(id: string, request: Api.JobPostEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOneBaseJobPostControllerJobPostEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseJobPostControllerJobPostEntity.');
			}

			let localVarPath = `/job-posts/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * JobPostsApi - functional programming interface
 * @export
 */
export const JobPostsApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobPostEntity
		 * @param {Api.JobPostCreateDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobPostControllerJobPostEntity(request: Api.JobPostCreateDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.CreateOneBaseJobPostControllerJobPostEntityResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).createOneBaseJobPostControllerJobPostEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single JobPostEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobPostControllerJobPostEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.DeleteOneBaseJobPostControllerJobPostEntityResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).deleteOneBaseJobPostControllerJobPostEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple JobPostEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetManyBaseJobPostControllerJobPostEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.GetManyBaseJobPostControllerJobPostEntityResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).getManyBaseJobPostControllerJobPostEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyJobPostEntityResponseDto | Api.JobPostEntity[],
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single JobPostEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetOneBaseJobPostControllerJobPostEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.GetOneBaseJobPostControllerJobPostEntityResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).getOneBaseJobPostControllerJobPostEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerAddEditorResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerAddEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetBySlug(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerGetBySlugResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerGetBySlug(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetBySlugForOwner(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerGetBySlugForOwnerResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerGetBySlugForOwner(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerGetManyWithApplied(__params: JobPostsApi.JobPostControllerGetManyWithAppliedParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerGetManyWithAppliedResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerGetManyWithApplied(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostWithAppliedDto[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerICanEdit(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerICanEditResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerICanEdit(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerOwnedByMe(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerOwnedByMeResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerOwnedByMe(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerRemoveEditorResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerRemoveEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		jobPostControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.JobPostControllerSwitchOwnerResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).jobPostControllerSwitchOwner(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single JobPostEntity
		 * @param {string} id
		 * @param {Api.JobPostEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobPostControllerJobPostEntity(id: string, request: Api.JobPostEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobPostsApi.UpdateOneBaseJobPostControllerJobPostEntityResponse> {
			const localVarFetchArgs = JobPostsApiFetchParamCreator(configuration).updateOneBaseJobPostControllerJobPostEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobPostEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * JobPostsApi - factory interface
 * @export
 */
export const JobPostsApiFactory: FactoryFunction<JobPostsApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new JobPostsApi(configuration, basePath, fetch);
};

/**
 * JobPostsApi - interface
 * @export
 * @interface JobPostsApi
 */
export interface JobPostsApiInterface {
	/**
	 * @summary Create a single JobPostEntity
	 * @param {Api.JobPostCreateDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseJobPostControllerJobPostEntity(request: Api.JobPostCreateDto, options?: RequestInit): Promise<JobPostsApi.CreateOneBaseJobPostControllerJobPostEntityResponse>

	/**
	 * @summary Delete a single JobPostEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseJobPostControllerJobPostEntity(id: string, options?: RequestInit): Promise<JobPostsApi.DeleteOneBaseJobPostControllerJobPostEntityResponse>

	/**
	 * @summary Retrieve multiple JobPostEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetManyBaseJobPostControllerJobPostEntityParameters, options?: RequestInit): Promise<JobPostsApi.GetManyBaseJobPostControllerJobPostEntityResponse>

	/**
	 * @summary Retrieve a single JobPostEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetOneBaseJobPostControllerJobPostEntityParameters, options?: RequestInit): Promise<JobPostsApi.GetOneBaseJobPostControllerJobPostEntityResponse>

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<JobPostsApi.JobPostControllerAddEditorResponse>

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerGetBySlug(slug: string, options?: RequestInit): Promise<JobPostsApi.JobPostControllerGetBySlugResponse>

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerGetBySlugForOwner(slug: string, options?: RequestInit): Promise<JobPostsApi.JobPostControllerGetBySlugForOwnerResponse>

	/**
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerGetManyWithApplied(__params: JobPostsApi.JobPostControllerGetManyWithAppliedParameters, options?: RequestInit): Promise<JobPostsApi.JobPostControllerGetManyWithAppliedResponse>

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerICanEdit(options?: RequestInit): Promise<JobPostsApi.JobPostControllerICanEditResponse>

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerOwnedByMe(options?: RequestInit): Promise<JobPostsApi.JobPostControllerOwnedByMeResponse>

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<JobPostsApi.JobPostControllerRemoveEditorResponse>

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	jobPostControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): Promise<JobPostsApi.JobPostControllerSwitchOwnerResponse>

	/**
	 * @summary Update a single JobPostEntity
	 * @param {string} id
	 * @param {Api.JobPostEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseJobPostControllerJobPostEntity(id: string, request: Api.JobPostEntity, options?: RequestInit): Promise<JobPostsApi.UpdateOneBaseJobPostControllerJobPostEntityResponse>

}

/**
 * JobPostsApi - object-oriented interface
 * @export
 * @class JobPostsApi
 * @extends {BaseAPI}
 */
export class JobPostsApi extends BaseAPI implements JobPostsApiInterface {
	/**
	 * @summary Create a single JobPostEntity
	 * @param {Api.JobPostCreateDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseJobPostControllerJobPostEntity(request: Api.JobPostCreateDto, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).createOneBaseJobPostControllerJobPostEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single JobPostEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseJobPostControllerJobPostEntity(id: string, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).deleteOneBaseJobPostControllerJobPostEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple JobPostEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetManyBaseJobPostControllerJobPostEntityParameters, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).getManyBaseJobPostControllerJobPostEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single JobPostEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseJobPostControllerJobPostEntity(__params: JobPostsApi.GetOneBaseJobPostControllerJobPostEntityParameters, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).getOneBaseJobPostControllerJobPostEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerAddEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerGetBySlug(slug: string, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerGetBySlug(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerGetBySlugForOwner(slug: string, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerGetBySlugForOwner(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerGetManyWithApplied(__params: JobPostsApi.JobPostControllerGetManyWithAppliedParameters, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerGetManyWithApplied(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerICanEdit(options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerICanEdit(options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerOwnedByMe(options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerOwnedByMe(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerRemoveEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public jobPostControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).jobPostControllerSwitchOwner(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single JobPostEntity
	 * @param {string} id
	 * @param {Api.JobPostEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseJobPostControllerJobPostEntity(id: string, request: Api.JobPostEntity, options?: RequestInit) {
		return JobPostsApiFp(this.configuration).updateOneBaseJobPostControllerJobPostEntity(id, request, options)(this.fetch, this.basePath);
	}

}
export namespace JobTagsApi {
	export type CreateOneBaseJobTagControllerJobTagEntityResponse =
		| CreateOneBaseJobTagControllerJobTagEntity201Response
		| CreateOneBaseJobTagControllerJobTagEntity400Response
		| CreateOneBaseJobTagControllerJobTagEntity401Response
		| CreateOneBaseJobTagControllerJobTagEntity403Response
		| CreateOneBaseJobTagControllerJobTagEntity404Response
		| CreateOneBaseJobTagControllerJobTagEntity409Response
		| CreateOneBaseJobTagControllerJobTagEntity422Response
		| CreateOneBaseJobTagControllerJobTagEntity500Response
	
	export interface CreateOneBaseJobTagControllerJobTagEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.JobTagEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseJobTagControllerJobTagEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseJobTagControllerJobTagEntityResponse =
		| DeleteOneBaseJobTagControllerJobTagEntity200Response
		| DeleteOneBaseJobTagControllerJobTagEntity400Response
		| DeleteOneBaseJobTagControllerJobTagEntity401Response
		| DeleteOneBaseJobTagControllerJobTagEntity403Response
		| DeleteOneBaseJobTagControllerJobTagEntity404Response
		| DeleteOneBaseJobTagControllerJobTagEntity409Response
		| DeleteOneBaseJobTagControllerJobTagEntity422Response
		| DeleteOneBaseJobTagControllerJobTagEntity500Response
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseJobTagControllerJobTagEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseJobTagControllerJobTagEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseJobTagControllerJobTagEntityResponse =
		| GetManyBaseJobTagControllerJobTagEntity200Response
	
	export interface GetManyBaseJobTagControllerJobTagEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyJobTagEntityResponseDto | Api.JobTagEntity[]
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseJobTagControllerJobTagEntityResponse =
		| GetOneBaseJobTagControllerJobTagEntity200Response
		| GetOneBaseJobTagControllerJobTagEntity400Response
		| GetOneBaseJobTagControllerJobTagEntity401Response
		| GetOneBaseJobTagControllerJobTagEntity403Response
		| GetOneBaseJobTagControllerJobTagEntity404Response
		| GetOneBaseJobTagControllerJobTagEntity409Response
		| GetOneBaseJobTagControllerJobTagEntity422Response
		| GetOneBaseJobTagControllerJobTagEntity500Response
	
	export interface GetOneBaseJobTagControllerJobTagEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobTagEntity
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseJobTagControllerJobTagEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseJobTagControllerJobTagEntityResponse =
		| UpdateOneBaseJobTagControllerJobTagEntity200Response
		| UpdateOneBaseJobTagControllerJobTagEntity400Response
		| UpdateOneBaseJobTagControllerJobTagEntity401Response
		| UpdateOneBaseJobTagControllerJobTagEntity403Response
		| UpdateOneBaseJobTagControllerJobTagEntity404Response
		| UpdateOneBaseJobTagControllerJobTagEntity409Response
		| UpdateOneBaseJobTagControllerJobTagEntity422Response
		| UpdateOneBaseJobTagControllerJobTagEntity500Response
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.JobTagEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseJobTagControllerJobTagEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * JobTagsApi - fetch parameter creator
 * @export
 */
export const JobTagsApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobTagEntity
		 * @param {Api.JobTagEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobTagControllerJobTagEntity(request: Api.JobTagEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseJobTagControllerJobTagEntity.');
			}

			let localVarPath = `/job-tags`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single JobTagEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobTagControllerJobTagEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseJobTagControllerJobTagEntity.');
			}

			let localVarPath = `/job-tags/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple JobTagEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetManyBaseJobTagControllerJobTagEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/job-tags`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single JobTagEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetOneBaseJobTagControllerJobTagEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseJobTagControllerJobTagEntity.');
			}

			let localVarPath = `/job-tags/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single JobTagEntity
		 * @param {string} id
		 * @param {Api.JobTagEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobTagControllerJobTagEntity(id: string, request: Api.JobTagEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOneBaseJobTagControllerJobTagEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseJobTagControllerJobTagEntity.');
			}

			let localVarPath = `/job-tags/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * JobTagsApi - functional programming interface
 * @export
 */
export const JobTagsApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single JobTagEntity
		 * @param {Api.JobTagEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseJobTagControllerJobTagEntity(request: Api.JobTagEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobTagsApi.CreateOneBaseJobTagControllerJobTagEntityResponse> {
			const localVarFetchArgs = JobTagsApiFetchParamCreator(configuration).createOneBaseJobTagControllerJobTagEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobTagEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single JobTagEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseJobTagControllerJobTagEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobTagsApi.DeleteOneBaseJobTagControllerJobTagEntityResponse> {
			const localVarFetchArgs = JobTagsApiFetchParamCreator(configuration).deleteOneBaseJobTagControllerJobTagEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple JobTagEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetManyBaseJobTagControllerJobTagEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobTagsApi.GetManyBaseJobTagControllerJobTagEntityResponse> {
			const localVarFetchArgs = JobTagsApiFetchParamCreator(configuration).getManyBaseJobTagControllerJobTagEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyJobTagEntityResponseDto | Api.JobTagEntity[],
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single JobTagEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetOneBaseJobTagControllerJobTagEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobTagsApi.GetOneBaseJobTagControllerJobTagEntityResponse> {
			const localVarFetchArgs = JobTagsApiFetchParamCreator(configuration).getOneBaseJobTagControllerJobTagEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobTagEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single JobTagEntity
		 * @param {string} id
		 * @param {Api.JobTagEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseJobTagControllerJobTagEntity(id: string, request: Api.JobTagEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<JobTagsApi.UpdateOneBaseJobTagControllerJobTagEntityResponse> {
			const localVarFetchArgs = JobTagsApiFetchParamCreator(configuration).updateOneBaseJobTagControllerJobTagEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.JobTagEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * JobTagsApi - factory interface
 * @export
 */
export const JobTagsApiFactory: FactoryFunction<JobTagsApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new JobTagsApi(configuration, basePath, fetch);
};

/**
 * JobTagsApi - interface
 * @export
 * @interface JobTagsApi
 */
export interface JobTagsApiInterface {
	/**
	 * @summary Create a single JobTagEntity
	 * @param {Api.JobTagEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseJobTagControllerJobTagEntity(request: Api.JobTagEntity, options?: RequestInit): Promise<JobTagsApi.CreateOneBaseJobTagControllerJobTagEntityResponse>

	/**
	 * @summary Delete a single JobTagEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseJobTagControllerJobTagEntity(id: string, options?: RequestInit): Promise<JobTagsApi.DeleteOneBaseJobTagControllerJobTagEntityResponse>

	/**
	 * @summary Retrieve multiple JobTagEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetManyBaseJobTagControllerJobTagEntityParameters, options?: RequestInit): Promise<JobTagsApi.GetManyBaseJobTagControllerJobTagEntityResponse>

	/**
	 * @summary Retrieve a single JobTagEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetOneBaseJobTagControllerJobTagEntityParameters, options?: RequestInit): Promise<JobTagsApi.GetOneBaseJobTagControllerJobTagEntityResponse>

	/**
	 * @summary Update a single JobTagEntity
	 * @param {string} id
	 * @param {Api.JobTagEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseJobTagControllerJobTagEntity(id: string, request: Api.JobTagEntity, options?: RequestInit): Promise<JobTagsApi.UpdateOneBaseJobTagControllerJobTagEntityResponse>

}

/**
 * JobTagsApi - object-oriented interface
 * @export
 * @class JobTagsApi
 * @extends {BaseAPI}
 */
export class JobTagsApi extends BaseAPI implements JobTagsApiInterface {
	/**
	 * @summary Create a single JobTagEntity
	 * @param {Api.JobTagEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseJobTagControllerJobTagEntity(request: Api.JobTagEntity, options?: RequestInit) {
		return JobTagsApiFp(this.configuration).createOneBaseJobTagControllerJobTagEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single JobTagEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseJobTagControllerJobTagEntity(id: string, options?: RequestInit) {
		return JobTagsApiFp(this.configuration).deleteOneBaseJobTagControllerJobTagEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple JobTagEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetManyBaseJobTagControllerJobTagEntityParameters, options?: RequestInit) {
		return JobTagsApiFp(this.configuration).getManyBaseJobTagControllerJobTagEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single JobTagEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseJobTagControllerJobTagEntity(__params: JobTagsApi.GetOneBaseJobTagControllerJobTagEntityParameters, options?: RequestInit) {
		return JobTagsApiFp(this.configuration).getOneBaseJobTagControllerJobTagEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single JobTagEntity
	 * @param {string} id
	 * @param {Api.JobTagEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseJobTagControllerJobTagEntity(id: string, request: Api.JobTagEntity, options?: RequestInit) {
		return JobTagsApiFp(this.configuration).updateOneBaseJobTagControllerJobTagEntity(id, request, options)(this.fetch, this.basePath);
	}

}
export namespace ProjectApi {
	export type CreateOneBaseProjectControllerProjectEntityResponse =
		| CreateOneBaseProjectControllerProjectEntity201Response
		| CreateOneBaseProjectControllerProjectEntity400Response
		| CreateOneBaseProjectControllerProjectEntity401Response
		| CreateOneBaseProjectControllerProjectEntity403Response
		| CreateOneBaseProjectControllerProjectEntity404Response
		| CreateOneBaseProjectControllerProjectEntity409Response
		| CreateOneBaseProjectControllerProjectEntity422Response
		| CreateOneBaseProjectControllerProjectEntity500Response
		| CreateOneBaseProjectControllerProjectEntityDefaultResponse
	
	export interface CreateOneBaseProjectControllerProjectEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectControllerProjectEntityDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
	export type DeleteOneBaseProjectControllerProjectEntityResponse =
		| DeleteOneBaseProjectControllerProjectEntity200Response
		| DeleteOneBaseProjectControllerProjectEntity400Response
		| DeleteOneBaseProjectControllerProjectEntity401Response
		| DeleteOneBaseProjectControllerProjectEntity403Response
		| DeleteOneBaseProjectControllerProjectEntity404Response
		| DeleteOneBaseProjectControllerProjectEntity409Response
		| DeleteOneBaseProjectControllerProjectEntity422Response
		| DeleteOneBaseProjectControllerProjectEntity500Response
	
	export interface DeleteOneBaseProjectControllerProjectEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectControllerProjectEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseProjectControllerProjectEntityResponse =
		| GetManyBaseProjectControllerProjectEntity200Response
		| GetManyBaseProjectControllerProjectEntity400Response
		| GetManyBaseProjectControllerProjectEntity401Response
		| GetManyBaseProjectControllerProjectEntity403Response
		| GetManyBaseProjectControllerProjectEntity404Response
		| GetManyBaseProjectControllerProjectEntity409Response
		| GetManyBaseProjectControllerProjectEntity422Response
		| GetManyBaseProjectControllerProjectEntity500Response
	
	export interface GetManyBaseProjectControllerProjectEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyProjectEntityResponseDto | Api.ProjectEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectControllerProjectEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntityParameters {
		slug: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseProjectControllerProjectEntityResponse =
		| GetOneBaseProjectControllerProjectEntity200Response
		| GetOneBaseProjectControllerProjectEntity400Response
		| GetOneBaseProjectControllerProjectEntity401Response
		| GetOneBaseProjectControllerProjectEntity403Response
		| GetOneBaseProjectControllerProjectEntity404Response
		| GetOneBaseProjectControllerProjectEntity409Response
		| GetOneBaseProjectControllerProjectEntity422Response
		| GetOneBaseProjectControllerProjectEntity500Response
		| GetOneBaseProjectControllerProjectEntityDefaultResponse
	
	export interface GetOneBaseProjectControllerProjectEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectControllerProjectEntityDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
	export type ProjectControllerAddEditorResponse =
		| ProjectControllerAddEditor400Response
		| ProjectControllerAddEditor401Response
		| ProjectControllerAddEditor403Response
		| ProjectControllerAddEditor404Response
		| ProjectControllerAddEditor409Response
		| ProjectControllerAddEditor422Response
		| ProjectControllerAddEditor500Response
	
	export interface ProjectControllerAddEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerAddEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type ProjectControllerICanEditResponse =
		| ProjectControllerICanEdit200Response
		| ProjectControllerICanEdit400Response
		| ProjectControllerICanEdit401Response
		| ProjectControllerICanEdit403Response
		| ProjectControllerICanEdit404Response
		| ProjectControllerICanEdit409Response
		| ProjectControllerICanEdit422Response
		| ProjectControllerICanEdit500Response
	
	export interface ProjectControllerICanEdit200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerICanEdit500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type ProjectControllerOwnedByMeResponse =
		| ProjectControllerOwnedByMe200Response
		| ProjectControllerOwnedByMe400Response
		| ProjectControllerOwnedByMe401Response
		| ProjectControllerOwnedByMe403Response
		| ProjectControllerOwnedByMe404Response
		| ProjectControllerOwnedByMe409Response
		| ProjectControllerOwnedByMe422Response
		| ProjectControllerOwnedByMe500Response
	
	export interface ProjectControllerOwnedByMe200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerOwnedByMe500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type ProjectControllerRemoveEditorResponse =
		| ProjectControllerRemoveEditor400Response
		| ProjectControllerRemoveEditor401Response
		| ProjectControllerRemoveEditor403Response
		| ProjectControllerRemoveEditor404Response
		| ProjectControllerRemoveEditor409Response
		| ProjectControllerRemoveEditor422Response
		| ProjectControllerRemoveEditor500Response
	
	export interface ProjectControllerRemoveEditor400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerRemoveEditor500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type ProjectControllerSwitchOwnerResponse =
		| ProjectControllerSwitchOwner400Response
		| ProjectControllerSwitchOwner401Response
		| ProjectControllerSwitchOwner403Response
		| ProjectControllerSwitchOwner404Response
		| ProjectControllerSwitchOwner409Response
		| ProjectControllerSwitchOwner422Response
		| ProjectControllerSwitchOwner500Response
	
	export interface ProjectControllerSwitchOwner400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface ProjectControllerSwitchOwner500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseProjectControllerProjectEntityResponse =
		| UpdateOneBaseProjectControllerProjectEntity200Response
		| UpdateOneBaseProjectControllerProjectEntity400Response
		| UpdateOneBaseProjectControllerProjectEntity401Response
		| UpdateOneBaseProjectControllerProjectEntity403Response
		| UpdateOneBaseProjectControllerProjectEntity404Response
		| UpdateOneBaseProjectControllerProjectEntity409Response
		| UpdateOneBaseProjectControllerProjectEntity422Response
		| UpdateOneBaseProjectControllerProjectEntity500Response
		| UpdateOneBaseProjectControllerProjectEntityDefaultResponse
	
	export interface UpdateOneBaseProjectControllerProjectEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseProjectControllerProjectEntityDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.ProjectEntity
		headers?: undefined
	}
	
}

/**
 * ProjectApi - fetch parameter creator
 * @export
 */
export const ProjectApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single ProjectEntity
		 * @param {Api.CreateProjectDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseProjectControllerProjectEntity(request: Api.CreateProjectDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseProjectControllerProjectEntity.');
			}

			let localVarPath = `/project`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single ProjectEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseProjectControllerProjectEntity(slug: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling deleteOneBaseProjectControllerProjectEntity.');
			}

			let localVarPath = `/project/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple ProjectEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseProjectControllerProjectEntity(__params: ProjectApi.GetManyBaseProjectControllerProjectEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/project`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single ProjectEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseProjectControllerProjectEntity(__params: ProjectApi.GetOneBaseProjectControllerProjectEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (__params.slug === null || __params.slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling getOneBaseProjectControllerProjectEntity.');
			}

			let localVarPath = `/project/{slug}`
				.replace('{slug}', encodeURIComponent(String(__params.slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerAddEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling projectControllerAddEditor.');
			}

			let localVarPath = `/project/add-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerICanEdit(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/project/get-editable-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerOwnedByMe(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/project/get-owned-by-me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerRemoveEditor(request: Api.EditorRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling projectControllerRemoveEditor.');
			}

			let localVarPath = `/project/remove-editor`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling projectControllerSwitchOwner.');
			}

			let localVarPath = `/project/transfer-ownership`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single ProjectEntity
		 * @param {string} slug
		 * @param {Api.CreateProjectDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseProjectControllerProjectEntity(slug: string, request: Api.CreateProjectDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'slug' is not null or undefined
			if (slug === null || slug === undefined) {
				throw new RequiredError('slug', 'Required parameter slug was null or undefined when calling updateOneBaseProjectControllerProjectEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseProjectControllerProjectEntity.');
			}

			let localVarPath = `/project/{slug}`
				.replace('{slug}', encodeURIComponent(String(slug)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single ProjectEntity
		 * @param {Api.CreateProjectDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseProjectControllerProjectEntity(request: Api.CreateProjectDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.CreateOneBaseProjectControllerProjectEntityResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).createOneBaseProjectControllerProjectEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ProjectEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ProjectEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single ProjectEntity
		 * @param {string} slug
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseProjectControllerProjectEntity(slug: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.DeleteOneBaseProjectControllerProjectEntityResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).deleteOneBaseProjectControllerProjectEntity(slug, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple ProjectEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseProjectControllerProjectEntity(__params: ProjectApi.GetManyBaseProjectControllerProjectEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.GetManyBaseProjectControllerProjectEntityResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).getManyBaseProjectControllerProjectEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyProjectEntityResponseDto | Api.ProjectEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single ProjectEntity
		 * @param {string} slug
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseProjectControllerProjectEntity(__params: ProjectApi.GetOneBaseProjectControllerProjectEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.GetOneBaseProjectControllerProjectEntityResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).getOneBaseProjectControllerProjectEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ProjectEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ProjectEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.ProjectControllerAddEditorResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).projectControllerAddEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users has permission to edit.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerICanEdit(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.ProjectControllerICanEditResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).projectControllerICanEdit(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * <p>Obtains all items the current users owns.</p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerOwnedByMe(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.ProjectControllerOwnedByMeResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).projectControllerOwnedByMe(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.EditorRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.ProjectControllerRemoveEditorResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).projectControllerRemoveEditor(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @param {Api.TransferOwnershipRequestDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		projectControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.ProjectControllerSwitchOwnerResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).projectControllerSwitchOwner(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single ProjectEntity
		 * @param {string} slug
		 * @param {Api.CreateProjectDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseProjectControllerProjectEntity(slug: string, request: Api.CreateProjectDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectApi.UpdateOneBaseProjectControllerProjectEntityResponse> {
			const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).updateOneBaseProjectControllerProjectEntity(slug, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ProjectEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.ProjectEntity,
					}
				}
				throw response;
			};
		},
	}
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory: FactoryFunction<ProjectApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new ProjectApi(configuration, basePath, fetch);
};

/**
 * ProjectApi - interface
 * @export
 * @interface ProjectApi
 */
export interface ProjectApiInterface {
	/**
	 * @summary Create a single ProjectEntity
	 * @param {Api.CreateProjectDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseProjectControllerProjectEntity(request: Api.CreateProjectDto, options?: RequestInit): Promise<ProjectApi.CreateOneBaseProjectControllerProjectEntityResponse>

	/**
	 * @summary Delete a single ProjectEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseProjectControllerProjectEntity(slug: string, options?: RequestInit): Promise<ProjectApi.DeleteOneBaseProjectControllerProjectEntityResponse>

	/**
	 * @summary Retrieve multiple ProjectEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseProjectControllerProjectEntity(__params: ProjectApi.GetManyBaseProjectControllerProjectEntityParameters, options?: RequestInit): Promise<ProjectApi.GetManyBaseProjectControllerProjectEntityResponse>

	/**
	 * @summary Retrieve a single ProjectEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseProjectControllerProjectEntity(__params: ProjectApi.GetOneBaseProjectControllerProjectEntityParameters, options?: RequestInit): Promise<ProjectApi.GetOneBaseProjectControllerProjectEntityResponse>

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	projectControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<ProjectApi.ProjectControllerAddEditorResponse>

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	projectControllerICanEdit(options?: RequestInit): Promise<ProjectApi.ProjectControllerICanEditResponse>

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	projectControllerOwnedByMe(options?: RequestInit): Promise<ProjectApi.ProjectControllerOwnedByMeResponse>

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	projectControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit): Promise<ProjectApi.ProjectControllerRemoveEditorResponse>

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	projectControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit): Promise<ProjectApi.ProjectControllerSwitchOwnerResponse>

	/**
	 * @summary Update a single ProjectEntity
	 * @param {string} slug
	 * @param {Api.CreateProjectDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseProjectControllerProjectEntity(slug: string, request: Api.CreateProjectDto, options?: RequestInit): Promise<ProjectApi.UpdateOneBaseProjectControllerProjectEntityResponse>

}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI implements ProjectApiInterface {
	/**
	 * @summary Create a single ProjectEntity
	 * @param {Api.CreateProjectDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseProjectControllerProjectEntity(request: Api.CreateProjectDto, options?: RequestInit) {
		return ProjectApiFp(this.configuration).createOneBaseProjectControllerProjectEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single ProjectEntity
	 * @param {string} slug
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseProjectControllerProjectEntity(slug: string, options?: RequestInit) {
		return ProjectApiFp(this.configuration).deleteOneBaseProjectControllerProjectEntity(slug, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple ProjectEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseProjectControllerProjectEntity(__params: ProjectApi.GetManyBaseProjectControllerProjectEntityParameters, options?: RequestInit) {
		return ProjectApiFp(this.configuration).getManyBaseProjectControllerProjectEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single ProjectEntity
	 * @param {string} slug
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseProjectControllerProjectEntity(__params: ProjectApi.GetOneBaseProjectControllerProjectEntityParameters, options?: RequestInit) {
		return ProjectApiFp(this.configuration).getOneBaseProjectControllerProjectEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public projectControllerAddEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return ProjectApiFp(this.configuration).projectControllerAddEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users has permission to edit.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public projectControllerICanEdit(options?: RequestInit) {
		return ProjectApiFp(this.configuration).projectControllerICanEdit(options)(this.fetch, this.basePath);
	}

	/**
	 * <p>Obtains all items the current users owns.</p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public projectControllerOwnedByMe(options?: RequestInit) {
		return ProjectApiFp(this.configuration).projectControllerOwnedByMe(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.EditorRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public projectControllerRemoveEditor(request: Api.EditorRequestDto, options?: RequestInit) {
		return ProjectApiFp(this.configuration).projectControllerRemoveEditor(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.TransferOwnershipRequestDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public projectControllerSwitchOwner(request: Api.TransferOwnershipRequestDto, options?: RequestInit) {
		return ProjectApiFp(this.configuration).projectControllerSwitchOwner(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single ProjectEntity
	 * @param {string} slug
	 * @param {Api.CreateProjectDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseProjectControllerProjectEntity(slug: string, request: Api.CreateProjectDto, options?: RequestInit) {
		return ProjectApiFp(this.configuration).updateOneBaseProjectControllerProjectEntity(slug, request, options)(this.fetch, this.basePath);
	}

}
export namespace ProjectVersionApi {
	export type CreateOneBaseProjectVersionControllerProjectVersionEntityResponse =
		| CreateOneBaseProjectVersionControllerProjectVersionEntity201Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity400Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity401Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity403Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity404Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity409Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity422Response
		| CreateOneBaseProjectVersionControllerProjectVersionEntity500Response
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.ProjectVersionEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseProjectVersionControllerProjectVersionEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse =
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity200Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity400Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity401Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity403Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity404Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity409Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity422Response
		| DeleteOneBaseProjectVersionControllerProjectVersionEntity500Response
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseProjectVersionControllerProjectVersionEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseProjectVersionControllerProjectVersionEntityResponse =
		| GetManyBaseProjectVersionControllerProjectVersionEntity200Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity400Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity401Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity403Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity404Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity409Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity422Response
		| GetManyBaseProjectVersionControllerProjectVersionEntity500Response
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyProjectVersionEntityResponseDto | Api.ProjectVersionEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseProjectVersionControllerProjectVersionEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseProjectVersionControllerProjectVersionEntityResponse =
		| GetOneBaseProjectVersionControllerProjectVersionEntity200Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity400Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity401Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity403Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity404Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity409Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity422Response
		| GetOneBaseProjectVersionControllerProjectVersionEntity500Response
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.ProjectVersionEntity
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseProjectVersionControllerProjectVersionEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * ProjectVersionApi - fetch parameter creator
 * @export
 */
export const ProjectVersionApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single ProjectVersionEntity
		 * @param {Api.ProjectVersionEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseProjectVersionControllerProjectVersionEntity(request: Api.ProjectVersionEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseProjectVersionControllerProjectVersionEntity.');
			}

			let localVarPath = `/project-version`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single ProjectVersionEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseProjectVersionControllerProjectVersionEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseProjectVersionControllerProjectVersionEntity.');
			}

			let localVarPath = `/project-version/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple ProjectVersionEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/project-version`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single ProjectVersionEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseProjectVersionControllerProjectVersionEntity.');
			}

			let localVarPath = `/project-version/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProjectVersionApi - functional programming interface
 * @export
 */
export const ProjectVersionApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single ProjectVersionEntity
		 * @param {Api.ProjectVersionEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseProjectVersionControllerProjectVersionEntity(request: Api.ProjectVersionEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectVersionApi.CreateOneBaseProjectVersionControllerProjectVersionEntityResponse> {
			const localVarFetchArgs = ProjectVersionApiFetchParamCreator(configuration).createOneBaseProjectVersionControllerProjectVersionEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ProjectVersionEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single ProjectVersionEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseProjectVersionControllerProjectVersionEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectVersionApi.DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse> {
			const localVarFetchArgs = ProjectVersionApiFetchParamCreator(configuration).deleteOneBaseProjectVersionControllerProjectVersionEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple ProjectVersionEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityResponse> {
			const localVarFetchArgs = ProjectVersionApiFetchParamCreator(configuration).getManyBaseProjectVersionControllerProjectVersionEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyProjectVersionEntityResponseDto | Api.ProjectVersionEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single ProjectVersionEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityResponse> {
			const localVarFetchArgs = ProjectVersionApiFetchParamCreator(configuration).getOneBaseProjectVersionControllerProjectVersionEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ProjectVersionEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * ProjectVersionApi - factory interface
 * @export
 */
export const ProjectVersionApiFactory: FactoryFunction<ProjectVersionApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new ProjectVersionApi(configuration, basePath, fetch);
};

/**
 * ProjectVersionApi - interface
 * @export
 * @interface ProjectVersionApi
 */
export interface ProjectVersionApiInterface {
	/**
	 * @summary Create a single ProjectVersionEntity
	 * @param {Api.ProjectVersionEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseProjectVersionControllerProjectVersionEntity(request: Api.ProjectVersionEntity, options?: RequestInit): Promise<ProjectVersionApi.CreateOneBaseProjectVersionControllerProjectVersionEntityResponse>

	/**
	 * @summary Delete a single ProjectVersionEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseProjectVersionControllerProjectVersionEntity(id: string, options?: RequestInit): Promise<ProjectVersionApi.DeleteOneBaseProjectVersionControllerProjectVersionEntityResponse>

	/**
	 * @summary Retrieve multiple ProjectVersionEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit): Promise<ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityResponse>

	/**
	 * @summary Retrieve a single ProjectVersionEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit): Promise<ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityResponse>

}

/**
 * ProjectVersionApi - object-oriented interface
 * @export
 * @class ProjectVersionApi
 * @extends {BaseAPI}
 */
export class ProjectVersionApi extends BaseAPI implements ProjectVersionApiInterface {
	/**
	 * @summary Create a single ProjectVersionEntity
	 * @param {Api.ProjectVersionEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseProjectVersionControllerProjectVersionEntity(request: Api.ProjectVersionEntity, options?: RequestInit) {
		return ProjectVersionApiFp(this.configuration).createOneBaseProjectVersionControllerProjectVersionEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single ProjectVersionEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseProjectVersionControllerProjectVersionEntity(id: string, options?: RequestInit) {
		return ProjectVersionApiFp(this.configuration).deleteOneBaseProjectVersionControllerProjectVersionEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple ProjectVersionEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetManyBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit) {
		return ProjectVersionApiFp(this.configuration).getManyBaseProjectVersionControllerProjectVersionEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single ProjectVersionEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseProjectVersionControllerProjectVersionEntity(__params: ProjectVersionApi.GetOneBaseProjectVersionControllerProjectVersionEntityParameters, options?: RequestInit) {
		return ProjectVersionApiFp(this.configuration).getOneBaseProjectVersionControllerProjectVersionEntity(__params, options)(this.fetch, this.basePath);
	}

}
export namespace QuizApi {
	export type CreateManyBaseQuizControllerQuizEntityResponse =
		| CreateManyBaseQuizControllerQuizEntity201Response
	
	export interface CreateManyBaseQuizControllerQuizEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.QuizEntity[]
		headers?: undefined
	}
	
	export type CreateOneBaseQuizControllerQuizEntityResponse =
		| CreateOneBaseQuizControllerQuizEntity201Response
	
	export interface CreateOneBaseQuizControllerQuizEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.QuizEntity
		headers?: undefined
	}
	
	export type DeleteOneBaseQuizControllerQuizEntityResponse =
		| DeleteOneBaseQuizControllerQuizEntity200Response
	
	export interface DeleteOneBaseQuizControllerQuizEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface GetManyBaseQuizControllerQuizEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseQuizControllerQuizEntityResponse =
		| GetManyBaseQuizControllerQuizEntity200Response
	
	export interface GetManyBaseQuizControllerQuizEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyQuizEntityResponseDto | Api.QuizEntity[]
		headers?: undefined
	}
	
	export interface GetOneBaseQuizControllerQuizEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseQuizControllerQuizEntityResponse =
		| GetOneBaseQuizControllerQuizEntity200Response
	
	export interface GetOneBaseQuizControllerQuizEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.QuizEntity
		headers?: undefined
	}
	
	export type ReplaceOneBaseQuizControllerQuizEntityResponse =
		| ReplaceOneBaseQuizControllerQuizEntity200Response
	
	export interface ReplaceOneBaseQuizControllerQuizEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.QuizEntity
		headers?: undefined
	}
	
	export type UpdateOneBaseQuizControllerQuizEntityResponse =
		| UpdateOneBaseQuizControllerQuizEntity200Response
	
	export interface UpdateOneBaseQuizControllerQuizEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.QuizEntity
		headers?: undefined
	}
	
}

/**
 * QuizApi - fetch parameter creator
 * @export
 */
export const QuizApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create multiple QuizEntities
		 * @param {Api.CreateManyQuizEntityDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createManyBaseQuizControllerQuizEntity(request: Api.CreateManyQuizEntityDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createManyBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz/bulk`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Create a single QuizEntity
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseQuizControllerQuizEntity(request: Api.QuizEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single QuizEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseQuizControllerQuizEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple QuizEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseQuizControllerQuizEntity(__params: QuizApi.GetManyBaseQuizControllerQuizEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/courses/{courseid}/quiz`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single QuizEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseQuizControllerQuizEntity(__params: QuizApi.GetOneBaseQuizControllerQuizEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Replace a single QuizEntity
		 * @param {string} id
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		replaceOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling replaceOneBaseQuizControllerQuizEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling replaceOneBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PUT' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single QuizEntity
		 * @param {string} id
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOneBaseQuizControllerQuizEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseQuizControllerQuizEntity.');
			}

			let localVarPath = `/courses/{courseid}/quiz/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * QuizApi - functional programming interface
 * @export
 */
export const QuizApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create multiple QuizEntities
		 * @param {Api.CreateManyQuizEntityDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createManyBaseQuizControllerQuizEntity(request: Api.CreateManyQuizEntityDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.CreateManyBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).createManyBaseQuizControllerQuizEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.QuizEntity[],
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Create a single QuizEntity
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseQuizControllerQuizEntity(request: Api.QuizEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.CreateOneBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).createOneBaseQuizControllerQuizEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.QuizEntity,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single QuizEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseQuizControllerQuizEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.DeleteOneBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).deleteOneBaseQuizControllerQuizEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple QuizEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseQuizControllerQuizEntity(__params: QuizApi.GetManyBaseQuizControllerQuizEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.GetManyBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).getManyBaseQuizControllerQuizEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyQuizEntityResponseDto | Api.QuizEntity[],
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single QuizEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseQuizControllerQuizEntity(__params: QuizApi.GetOneBaseQuizControllerQuizEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.GetOneBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).getOneBaseQuizControllerQuizEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.QuizEntity,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Replace a single QuizEntity
		 * @param {string} id
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		replaceOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.ReplaceOneBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).replaceOneBaseQuizControllerQuizEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.QuizEntity,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single QuizEntity
		 * @param {string} id
		 * @param {Api.QuizEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<QuizApi.UpdateOneBaseQuizControllerQuizEntityResponse> {
			const localVarFetchArgs = QuizApiFetchParamCreator(configuration).updateOneBaseQuizControllerQuizEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.QuizEntity,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * QuizApi - factory interface
 * @export
 */
export const QuizApiFactory: FactoryFunction<QuizApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new QuizApi(configuration, basePath, fetch);
};

/**
 * QuizApi - interface
 * @export
 * @interface QuizApi
 */
export interface QuizApiInterface {
	/**
	 * @summary Create multiple QuizEntities
	 * @param {Api.CreateManyQuizEntityDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createManyBaseQuizControllerQuizEntity(request: Api.CreateManyQuizEntityDto, options?: RequestInit): Promise<QuizApi.CreateManyBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Create a single QuizEntity
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseQuizControllerQuizEntity(request: Api.QuizEntity, options?: RequestInit): Promise<QuizApi.CreateOneBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Delete a single QuizEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseQuizControllerQuizEntity(id: string, options?: RequestInit): Promise<QuizApi.DeleteOneBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Retrieve multiple QuizEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseQuizControllerQuizEntity(__params: QuizApi.GetManyBaseQuizControllerQuizEntityParameters, options?: RequestInit): Promise<QuizApi.GetManyBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Retrieve a single QuizEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseQuizControllerQuizEntity(__params: QuizApi.GetOneBaseQuizControllerQuizEntityParameters, options?: RequestInit): Promise<QuizApi.GetOneBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Replace a single QuizEntity
	 * @param {string} id
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	replaceOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit): Promise<QuizApi.ReplaceOneBaseQuizControllerQuizEntityResponse>

	/**
	 * @summary Update a single QuizEntity
	 * @param {string} id
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit): Promise<QuizApi.UpdateOneBaseQuizControllerQuizEntityResponse>

}

/**
 * QuizApi - object-oriented interface
 * @export
 * @class QuizApi
 * @extends {BaseAPI}
 */
export class QuizApi extends BaseAPI implements QuizApiInterface {
	/**
	 * @summary Create multiple QuizEntities
	 * @param {Api.CreateManyQuizEntityDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createManyBaseQuizControllerQuizEntity(request: Api.CreateManyQuizEntityDto, options?: RequestInit) {
		return QuizApiFp(this.configuration).createManyBaseQuizControllerQuizEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Create a single QuizEntity
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseQuizControllerQuizEntity(request: Api.QuizEntity, options?: RequestInit) {
		return QuizApiFp(this.configuration).createOneBaseQuizControllerQuizEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single QuizEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseQuizControllerQuizEntity(id: string, options?: RequestInit) {
		return QuizApiFp(this.configuration).deleteOneBaseQuizControllerQuizEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple QuizEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseQuizControllerQuizEntity(__params: QuizApi.GetManyBaseQuizControllerQuizEntityParameters, options?: RequestInit) {
		return QuizApiFp(this.configuration).getManyBaseQuizControllerQuizEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single QuizEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseQuizControllerQuizEntity(__params: QuizApi.GetOneBaseQuizControllerQuizEntityParameters, options?: RequestInit) {
		return QuizApiFp(this.configuration).getOneBaseQuizControllerQuizEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Replace a single QuizEntity
	 * @param {string} id
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public replaceOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit) {
		return QuizApiFp(this.configuration).replaceOneBaseQuizControllerQuizEntity(id, request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single QuizEntity
	 * @param {string} id
	 * @param {Api.QuizEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseQuizControllerQuizEntity(id: string, request: Api.QuizEntity, options?: RequestInit) {
		return QuizApiFp(this.configuration).updateOneBaseQuizControllerQuizEntity(id, request, options)(this.fetch, this.basePath);
	}

}
export namespace TicketApi {
	export type CreateOneBaseTicketControllerTicketEntityResponse =
		| CreateOneBaseTicketControllerTicketEntity201Response
		| CreateOneBaseTicketControllerTicketEntity400Response
		| CreateOneBaseTicketControllerTicketEntity401Response
		| CreateOneBaseTicketControllerTicketEntity403Response
		| CreateOneBaseTicketControllerTicketEntity404Response
		| CreateOneBaseTicketControllerTicketEntity409Response
		| CreateOneBaseTicketControllerTicketEntity422Response
		| CreateOneBaseTicketControllerTicketEntity500Response
	
	export interface CreateOneBaseTicketControllerTicketEntity201Response {
		status: 201
		contentType: 'application/json'
		body: Api.TicketEntity
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface CreateOneBaseTicketControllerTicketEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type DeleteOneBaseTicketControllerTicketEntityResponse =
		| DeleteOneBaseTicketControllerTicketEntity200Response
		| DeleteOneBaseTicketControllerTicketEntity400Response
		| DeleteOneBaseTicketControllerTicketEntity401Response
		| DeleteOneBaseTicketControllerTicketEntity403Response
		| DeleteOneBaseTicketControllerTicketEntity404Response
		| DeleteOneBaseTicketControllerTicketEntity409Response
		| DeleteOneBaseTicketControllerTicketEntity422Response
		| DeleteOneBaseTicketControllerTicketEntity500Response
	
	export interface DeleteOneBaseTicketControllerTicketEntity200Response {
		status: 200
		body?: undefined
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface DeleteOneBaseTicketControllerTicketEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntityParameters {
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @type {string}
		 */
		s?: string
		/**
		 * @description <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		filter?: string[]
		/**
		 * @description <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		or?: string[]
		/**
		 * @description <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		sort?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		limit?: number
		/**
		 * @description <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		offset?: number
		/**
		 * @description <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @type {number}
		 */
		page?: number
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetManyBaseTicketControllerTicketEntityResponse =
		| GetManyBaseTicketControllerTicketEntity200Response
		| GetManyBaseTicketControllerTicketEntity400Response
		| GetManyBaseTicketControllerTicketEntity401Response
		| GetManyBaseTicketControllerTicketEntity403Response
		| GetManyBaseTicketControllerTicketEntity404Response
		| GetManyBaseTicketControllerTicketEntity409Response
		| GetManyBaseTicketControllerTicketEntity422Response
		| GetManyBaseTicketControllerTicketEntity500Response
	
	export interface GetManyBaseTicketControllerTicketEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.GetManyTicketEntityResponseDto | Api.TicketEntity[]
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetManyBaseTicketControllerTicketEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntityParameters {
		id: string
		/**
		 * @description <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		fields?: string[]
		/**
		 * @description <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @type {string[]}
		 */
		join?: string[]
		/**
		 * @description <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @type {number}
		 * minimum: 0
		 * maximum: 1
		 */
		cache?: number
	}
	
	export type GetOneBaseTicketControllerTicketEntityResponse =
		| GetOneBaseTicketControllerTicketEntity200Response
		| GetOneBaseTicketControllerTicketEntity400Response
		| GetOneBaseTicketControllerTicketEntity401Response
		| GetOneBaseTicketControllerTicketEntity403Response
		| GetOneBaseTicketControllerTicketEntity404Response
		| GetOneBaseTicketControllerTicketEntity409Response
		| GetOneBaseTicketControllerTicketEntity422Response
		| GetOneBaseTicketControllerTicketEntity500Response
	
	export interface GetOneBaseTicketControllerTicketEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.TicketEntity
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface GetOneBaseTicketControllerTicketEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export type UpdateOneBaseTicketControllerTicketEntityResponse =
		| UpdateOneBaseTicketControllerTicketEntity200Response
		| UpdateOneBaseTicketControllerTicketEntity400Response
		| UpdateOneBaseTicketControllerTicketEntity401Response
		| UpdateOneBaseTicketControllerTicketEntity403Response
		| UpdateOneBaseTicketControllerTicketEntity404Response
		| UpdateOneBaseTicketControllerTicketEntity409Response
		| UpdateOneBaseTicketControllerTicketEntity422Response
		| UpdateOneBaseTicketControllerTicketEntity500Response
	
	export interface UpdateOneBaseTicketControllerTicketEntity200Response {
		status: 200
		contentType: 'application/json'
		body: Api.TicketEntity
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UpdateOneBaseTicketControllerTicketEntity500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
}

/**
 * TicketApi - fetch parameter creator
 * @export
 */
export const TicketApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single TicketEntity
		 * @param {Api.CreateTicketDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseTicketControllerTicketEntity(request: Api.CreateTicketDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling createOneBaseTicketControllerTicketEntity.');
			}

			let localVarPath = `/tickets`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Delete a single TicketEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseTicketControllerTicketEntity(id: string, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOneBaseTicketControllerTicketEntity.');
			}

			let localVarPath = `/tickets/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve multiple TicketEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseTicketControllerTicketEntity(__params: TicketApi.GetManyBaseTicketControllerTicketEntityParameters, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/tickets`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.s !== undefined) {
				localVarQueryParameter.append('s', String(__params.s));
			}

			if (__params.filter !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.filter) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('filter', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.or !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.or) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('or', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.sort !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.sort) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('sort', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.limit !== undefined) {
				localVarQueryParameter.append('limit', String(__params.limit));
			}

			if (__params.offset !== undefined) {
				localVarQueryParameter.append('offset', String(__params.offset));
			}

			if (__params.page !== undefined) {
				localVarQueryParameter.append('page', String(__params.page));
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Retrieve a single TicketEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseTicketControllerTicketEntity(__params: TicketApi.GetOneBaseTicketControllerTicketEntityParameters, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (__params.id === null || __params.id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneBaseTicketControllerTicketEntity.');
			}

			let localVarPath = `/tickets/{id}`
				.replace('{id}', encodeURIComponent(String(__params.id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			if (__params.fields !== undefined) {
				/* array form */
				localVarQueryParameter.append('fields', __params.fields.map(localVarArrayMapElement => escape(String(localVarArrayMapElement))).join(','));
			}

			if (__params.join !== undefined) {
				/* array form exploded */
				for (const localVarArrayElement of __params.join) {
					if (localVarArrayElement !== undefined) {
						localVarQueryParameter.append('join', localVarArrayElement !== null ? String(localVarArrayElement) : '');
					}
				}
			}

			if (__params.cache !== undefined) {
				localVarQueryParameter.append('cache', String(__params.cache));
			}

			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @summary Update a single TicketEntity
		 * @param {string} id
		 * @param {Api.TicketEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseTicketControllerTicketEntity(id: string, request: Api.TicketEntity, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'id' is not null or undefined
			if (id === null || id === undefined) {
				throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOneBaseTicketControllerTicketEntity.');
			}
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling updateOneBaseTicketControllerTicketEntity.');
			}

			let localVarPath = `/tickets/{id}`
				.replace('{id}', encodeURIComponent(String(id)));
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @summary Create a single TicketEntity
		 * @param {Api.CreateTicketDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createOneBaseTicketControllerTicketEntity(request: Api.CreateTicketDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<TicketApi.CreateOneBaseTicketControllerTicketEntityResponse> {
			const localVarFetchArgs = TicketApiFetchParamCreator(configuration).createOneBaseTicketControllerTicketEntity(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 201) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.TicketEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Delete a single TicketEntity
		 * @param {string} id
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteOneBaseTicketControllerTicketEntity(id: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<TicketApi.DeleteOneBaseTicketControllerTicketEntityResponse> {
			const localVarFetchArgs = TicketApiFetchParamCreator(configuration).deleteOneBaseTicketControllerTicketEntity(id, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					return {
						status: response.status,
						/* No content */
					}
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve multiple TicketEntities
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
		 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
		 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
		 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
		 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
		 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getManyBaseTicketControllerTicketEntity(__params: TicketApi.GetManyBaseTicketControllerTicketEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<TicketApi.GetManyBaseTicketControllerTicketEntityResponse> {
			const localVarFetchArgs = TicketApiFetchParamCreator(configuration).getManyBaseTicketControllerTicketEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.GetManyTicketEntityResponseDto | Api.TicketEntity[],
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Retrieve a single TicketEntity
		 * @param {string} id
		 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
		 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
		 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getOneBaseTicketControllerTicketEntity(__params: TicketApi.GetOneBaseTicketControllerTicketEntityParameters, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<TicketApi.GetOneBaseTicketControllerTicketEntityResponse> {
			const localVarFetchArgs = TicketApiFetchParamCreator(configuration).getOneBaseTicketControllerTicketEntity(__params, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.TicketEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
		/**
		 * @summary Update a single TicketEntity
		 * @param {string} id
		 * @param {Api.TicketEntity} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateOneBaseTicketControllerTicketEntity(id: string, request: Api.TicketEntity, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<TicketApi.UpdateOneBaseTicketControllerTicketEntityResponse> {
			const localVarFetchArgs = TicketApiFetchParamCreator(configuration).updateOneBaseTicketControllerTicketEntity(id, request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 200) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.TicketEntity,
						}
					}
					throw response;
				}
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				throw response;
			};
		},
	}
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory: FactoryFunction<TicketApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new TicketApi(configuration, basePath, fetch);
};

/**
 * TicketApi - interface
 * @export
 * @interface TicketApi
 */
export interface TicketApiInterface {
	/**
	 * @summary Create a single TicketEntity
	 * @param {Api.CreateTicketDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	createOneBaseTicketControllerTicketEntity(request: Api.CreateTicketDto, options?: RequestInit): Promise<TicketApi.CreateOneBaseTicketControllerTicketEntityResponse>

	/**
	 * @summary Delete a single TicketEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	deleteOneBaseTicketControllerTicketEntity(id: string, options?: RequestInit): Promise<TicketApi.DeleteOneBaseTicketControllerTicketEntityResponse>

	/**
	 * @summary Retrieve multiple TicketEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getManyBaseTicketControllerTicketEntity(__params: TicketApi.GetManyBaseTicketControllerTicketEntityParameters, options?: RequestInit): Promise<TicketApi.GetManyBaseTicketControllerTicketEntityResponse>

	/**
	 * @summary Retrieve a single TicketEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	getOneBaseTicketControllerTicketEntity(__params: TicketApi.GetOneBaseTicketControllerTicketEntityParameters, options?: RequestInit): Promise<TicketApi.GetOneBaseTicketControllerTicketEntityResponse>

	/**
	 * @summary Update a single TicketEntity
	 * @param {string} id
	 * @param {Api.TicketEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	updateOneBaseTicketControllerTicketEntity(id: string, request: Api.TicketEntity, options?: RequestInit): Promise<TicketApi.UpdateOneBaseTicketControllerTicketEntityResponse>

}

/**
 * TicketApi - object-oriented interface
 * @export
 * @class TicketApi
 * @extends {BaseAPI}
 */
export class TicketApi extends BaseAPI implements TicketApiInterface {
	/**
	 * @summary Create a single TicketEntity
	 * @param {Api.CreateTicketDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public createOneBaseTicketControllerTicketEntity(request: Api.CreateTicketDto, options?: RequestInit) {
		return TicketApiFp(this.configuration).createOneBaseTicketControllerTicketEntity(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Delete a single TicketEntity
	 * @param {string} id
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public deleteOneBaseTicketControllerTicketEntity(id: string, options?: RequestInit) {
		return TicketApiFp(this.configuration).deleteOneBaseTicketControllerTicketEntity(id, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve multiple TicketEntities
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string} [s] <p>Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a></p>
	 * @param {string[]} [filter] <p>Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a></p>
	 * @param {string[]} [or] <p>Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a></p>
	 * @param {string[]} [sort] <p>Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [limit] <p>Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a></p>
	 * @param {number} [offset] <p>Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a></p>
	 * @param {number} [page] <p>Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getManyBaseTicketControllerTicketEntity(__params: TicketApi.GetManyBaseTicketControllerTicketEntityParameters, options?: RequestInit) {
		return TicketApiFp(this.configuration).getManyBaseTicketControllerTicketEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Retrieve a single TicketEntity
	 * @param {string} id
	 * @param {string[]} [fields] <p>Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a></p>
	 * @param {string[]} [join] <p>Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a></p>
	 * @param {number} [cache] <p>Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a></p>
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public getOneBaseTicketControllerTicketEntity(__params: TicketApi.GetOneBaseTicketControllerTicketEntityParameters, options?: RequestInit) {
		return TicketApiFp(this.configuration).getOneBaseTicketControllerTicketEntity(__params, options)(this.fetch, this.basePath);
	}

	/**
	 * @summary Update a single TicketEntity
	 * @param {string} id
	 * @param {Api.TicketEntity} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public updateOneBaseTicketControllerTicketEntity(id: string, request: Api.TicketEntity, options?: RequestInit) {
		return TicketApiFp(this.configuration).updateOneBaseTicketControllerTicketEntity(id, request, options)(this.fetch, this.basePath);
	}

}
export namespace UsersApi {
	export type UserControllerMeResponse =
		| UserControllerMe400Response
		| UserControllerMe401Response
		| UserControllerMe403Response
		| UserControllerMe404Response
		| UserControllerMe409Response
		| UserControllerMe422Response
		| UserControllerMe500Response
		| UserControllerMeDefaultResponse
	
	export interface UserControllerMe400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMe500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserControllerMeDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.UserEntity
		headers?: undefined
	}
	
	export type UserProfileControllerGetResponse =
		| UserProfileControllerGet400Response
		| UserProfileControllerGet401Response
		| UserProfileControllerGet403Response
		| UserProfileControllerGet404Response
		| UserProfileControllerGet409Response
		| UserProfileControllerGet422Response
		| UserProfileControllerGet500Response
		| UserProfileControllerGetDefaultResponse
	
	export interface UserProfileControllerGet400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGet500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerGetDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.UserProfileEntity
		headers?: undefined
	}
	
	export type UserProfileControllerUpdateResponse =
		| UserProfileControllerUpdate400Response
		| UserProfileControllerUpdate401Response
		| UserProfileControllerUpdate403Response
		| UserProfileControllerUpdate404Response
		| UserProfileControllerUpdate409Response
		| UserProfileControllerUpdate422Response
		| UserProfileControllerUpdate500Response
		| UserProfileControllerUpdateDefaultResponse
	
	export interface UserProfileControllerUpdate400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdate500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.UserProfileEntity
		headers?: undefined
	}
	
	export type UserProfileControllerUpdateProfilePictureResponse =
		| UserProfileControllerUpdateProfilePicture400Response
		| UserProfileControllerUpdateProfilePicture401Response
		| UserProfileControllerUpdateProfilePicture403Response
		| UserProfileControllerUpdateProfilePicture404Response
		| UserProfileControllerUpdateProfilePicture409Response
		| UserProfileControllerUpdateProfilePicture422Response
		| UserProfileControllerUpdateProfilePicture500Response
		| UserProfileControllerUpdateProfilePictureDefaultResponse
	
	export interface UserProfileControllerUpdateProfilePicture400Response {
		status: 400
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture401Response {
		status: 401
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture403Response {
		status: 403
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture404Response {
		status: 404
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture409Response {
		status: 409
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture422Response {
		status: 422
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePicture500Response {
		status: 500
		contentType: 'application/json'
		body: Api.ApiErrorResponseDto
		headers?: undefined
	}
	
	export interface UserProfileControllerUpdateProfilePictureDefaultResponse {
		status: number
		contentType: 'application/json'
		body: Api.UserProfileEntity
		headers?: undefined
	}
	
}

/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userControllerMe(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/users/me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerGet(options: RequestInit = {}): FetchArgs {

			let localVarPath = `/user-profile/me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarRequestOptions.headers = localVarHeaderParameter;

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.UpdateUserProfileDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerUpdate(request: Api.UpdateUserProfileDto, options: RequestInit = {}): FetchArgs {
			// verify required parameter 'request' is not null or undefined
			if (request === null || request === undefined) {
				throw new RequiredError('request', 'Required parameter request was null or undefined when calling userProfileControllerUpdate.');
			}

			let localVarPath = `/user-profile/me`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'application/json');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				localVarRequestOptions.body = JSON.stringify(request || {});
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
		/**
		 * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerUpdateProfilePicture(request: Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData | undefined, options: RequestInit = {}): FetchArgs {

			let localVarPath = `/user-profile/profile-picture`;
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: 'PATCH' }, options);
			const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}

			// authentication bearer required
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization('bearer')
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter.set("Authorization", "Bearer " + localVarAuthorizationValue);
				}
			}
			localVarHeaderParameter.set('Content-Type', 'multipart/form-data');

			localVarRequestOptions.headers = localVarHeaderParameter;
	
			if (request !== undefined) {
				const localVarFormData = new FormData();
				if (request.profilePicture !== undefined) {
					localVarFormData.append('profilePicture', request.profilePicture.value);
				}
				localVarRequestOptions.body = localVarFormData;
			}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
	return {
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userControllerMe(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<UsersApi.UserControllerMeResponse> {
			const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userControllerMe(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.UserEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerGet(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<UsersApi.UserProfileControllerGetResponse> {
			const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userProfileControllerGet(options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.UserProfileEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.UpdateUserProfileDto} request
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerUpdate(request: Api.UpdateUserProfileDto, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<UsersApi.UserProfileControllerUpdateResponse> {
			const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userProfileControllerUpdate(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.UserProfileEntity,
					}
				}
				throw response;
			};
		},
		/**
		 * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]
		 * @param {RequestInit} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userProfileControllerUpdateProfilePicture(request: Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<UsersApi.UserProfileControllerUpdateProfilePictureResponse> {
			const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userProfileControllerUpdateProfilePicture(request, options);
			return async (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {
				const response = await fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options)
				const contentType = response.headers.get('Content-Type');
				const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
				
				if (response.status === 400) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 401) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 403) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 404) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 409) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 422) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				if (response.status === 500) {
					if (mimeType === 'application/json') {
						return {
							status: response.status,
							contentType: 'application/json',
							body: await response.json() as Api.ApiErrorResponseDto,
						}
					}
					throw response;
				}
				/* Catch-all response */
				if (mimeType === 'application/json') {
					return {
						status: response.status,
						contentType: 'application/json',
						body: await response.json() as Api.UserProfileEntity,
					}
				}
				throw response;
			};
		},
	}
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory: FactoryFunction<UsersApiInterface> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new UsersApi(configuration, basePath, fetch);
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	userControllerMe(options?: RequestInit): Promise<UsersApi.UserControllerMeResponse>

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	userProfileControllerGet(options?: RequestInit): Promise<UsersApi.UserProfileControllerGetResponse>

	/**
	 * @param {Api.UpdateUserProfileDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	userProfileControllerUpdate(request: Api.UpdateUserProfileDto, options?: RequestInit): Promise<UsersApi.UserProfileControllerUpdateResponse>

	/**
	 * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	userProfileControllerUpdateProfilePicture(request: Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData | undefined, options?: RequestInit): Promise<UsersApi.UserProfileControllerUpdateProfilePictureResponse>

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public userControllerMe(options?: RequestInit) {
		return UsersApiFp(this.configuration).userControllerMe(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public userProfileControllerGet(options?: RequestInit) {
		return UsersApiFp(this.configuration).userProfileControllerGet(options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.UpdateUserProfileDto} request
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public userProfileControllerUpdate(request: Api.UpdateUserProfileDto, options?: RequestInit) {
		return UsersApiFp(this.configuration).userProfileControllerUpdate(request, options)(this.fetch, this.basePath);
	}

	/**
	 * @param {Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData} [request]
	 * @param {RequestInit} [options] Override http request option.
	 * @throws {RequiredError}
	 */
	public userProfileControllerUpdateProfilePicture(request: Api.UserProfileControllerUpdateProfilePictureRequest.MultipartFormData | undefined, options?: RequestInit) {
		return UsersApiFp(this.configuration).userProfileControllerUpdateProfilePicture(request, options)(this.fetch, this.basePath);
	}

}

/**
 * We sometimes represent dates as strings (in models) and as Dates (in parameters) so this
 * function converts them both to a string.
 */
function dateToString(value: Date | string | undefined): string | undefined {
	if (value instanceof Date) {
		return value.toISOString();
	} else if (typeof value === 'string') {
		return value;
	} else {
		return undefined;
	}
}
